{
  "version": 3,
  "sources": ["../../proj4/lib/global.js", "../../proj4/lib/constants/values.js", "../../proj4/lib/constants/PrimeMeridian.js", "../../proj4/lib/constants/units.js", "../../proj4/lib/match.js", "../../proj4/lib/projString.js", "../../wkt-parser/parser.js", "../../wkt-parser/process.js", "../../wkt-parser/index.js", "../../proj4/lib/defs.js", "../../proj4/lib/parseCode.js", "../../proj4/lib/extend.js", "../../proj4/lib/common/msfnz.js", "../../proj4/lib/common/sign.js", "../../proj4/lib/common/adjust_lon.js", "../../proj4/lib/common/tsfnz.js", "../../proj4/lib/common/phi2z.js", "../../proj4/lib/projections/merc.js", "../../proj4/lib/projections/longlat.js", "../../proj4/lib/projections.js", "../../proj4/lib/constants/Ellipsoid.js", "../../proj4/lib/deriveConstants.js", "../../proj4/lib/constants/Datum.js", "../../proj4/lib/datum.js", "../../proj4/lib/nadgrid.js", "../../proj4/lib/Proj.js", "../../proj4/lib/datumUtils.js", "../../proj4/lib/datum_transform.js", "../../proj4/lib/adjust_axis.js", "../../proj4/lib/common/toPoint.js", "../../proj4/lib/checkSanity.js", "../../proj4/lib/transform.js", "../../proj4/lib/core.js", "../../mgrs/mgrs.js", "../../proj4/lib/Point.js", "../../proj4/lib/common/pj_enfn.js", "../../proj4/lib/common/pj_mlfn.js", "../../proj4/lib/common/pj_inv_mlfn.js", "../../proj4/lib/projections/tmerc.js", "../../proj4/lib/common/sinh.js", "../../proj4/lib/common/hypot.js", "../../proj4/lib/common/log1py.js", "../../proj4/lib/common/asinhy.js", "../../proj4/lib/common/gatg.js", "../../proj4/lib/common/clens.js", "../../proj4/lib/common/cosh.js", "../../proj4/lib/common/clens_cmplx.js", "../../proj4/lib/projections/etmerc.js", "../../proj4/lib/common/adjust_zone.js", "../../proj4/lib/projections/utm.js", "../../proj4/lib/common/srat.js", "../../proj4/lib/projections/gauss.js", "../../proj4/lib/projections/sterea.js", "../../proj4/lib/projections/stere.js", "../../proj4/lib/projections/somerc.js", "../../proj4/lib/projections/omerc.js", "../../proj4/lib/projections/lcc.js", "../../proj4/lib/projections/krovak.js", "../../proj4/lib/common/mlfn.js", "../../proj4/lib/common/e0fn.js", "../../proj4/lib/common/e1fn.js", "../../proj4/lib/common/e2fn.js", "../../proj4/lib/common/e3fn.js", "../../proj4/lib/common/gN.js", "../../proj4/lib/common/adjust_lat.js", "../../proj4/lib/common/imlfn.js", "../../proj4/lib/projections/cass.js", "../../proj4/lib/common/qsfnz.js", "../../proj4/lib/projections/laea.js", "../../proj4/lib/common/asinz.js", "../../proj4/lib/projections/aea.js", "../../proj4/lib/projections/gnom.js", "../../proj4/lib/common/iqsfnz.js", "../../proj4/lib/projections/cea.js", "../../proj4/lib/projections/eqc.js", "../../proj4/lib/projections/poly.js", "../../proj4/lib/projections/nzmg.js", "../../proj4/lib/projections/mill.js", "../../proj4/lib/projections/sinu.js", "../../proj4/lib/projections/moll.js", "../../proj4/lib/projections/eqdc.js", "../../proj4/lib/projections/vandg.js", "../../proj4/lib/projections/aeqd.js", "../../proj4/lib/projections/ortho.js", "../../proj4/lib/projections/qsc.js", "../../proj4/lib/projections/robin.js", "../../proj4/lib/projections/geocent.js", "../../proj4/lib/projections/tpers.js", "../../proj4/lib/projections/geos.js", "../../proj4/lib/projections/eqearth.js", "../../proj4/lib/projections/bonne.js", "../../proj4/projs.js", "../../proj4/lib/index.js"],
  "sourcesContent": ["export default function(defs) {\r\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\r\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\r\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\r\n  // UTM WGS84\r\n  for (var i = 1; i <= 60; ++i) {\r\n    defs('EPSG:' + (32600 + i), \"+proj=utm +zone=\" + i + \" +datum=WGS84 +units=m\");\r\n    defs('EPSG:' + (32700 + i), \"+proj=utm +zone=\" + i + \" +south +datum=WGS84 +units=m\");\r\n  }\r\n\r\n  defs.WGS84 = defs['EPSG:4326'];\r\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\r\n  defs.GOOGLE = defs['EPSG:3857'];\r\n  defs['EPSG:900913'] = defs['EPSG:3857'];\r\n  defs['EPSG:102113'] = defs['EPSG:3857'];\r\n}\r\n", "export var PJD_3PARAM = 1;\r\nexport var PJD_7PARAM = 2;\r\nexport var PJD_GRIDSHIFT = 3;\r\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\r\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\r\nexport var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\r\nexport var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\r\nexport var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\r\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\r\nexport var HALF_PI = Math.PI/2;\r\n// ellipoid pj_set_ell.c\r\nexport var SIXTH = 0.1666666666666666667;\r\n/* 1/6 */\r\nexport var RA4 = 0.04722222222222222222;\r\n/* 17/360 */\r\nexport var RA6 = 0.02215608465608465608;\r\nexport var EPSLN = 1.0e-10;\r\n// you'd think you could use Number.EPSILON above but that makes\r\n// Mollweide get into an infinate loop.\r\n\r\nexport var D2R = 0.01745329251994329577;\r\nexport var R2D = 57.29577951308232088;\r\nexport var FORTPI = Math.PI/4;\r\nexport var TWO_PI = Math.PI * 2;\r\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\r\n// degree range by a tiny amount don't get wrapped. This prevents points that\r\n// have drifted from their original location along the 180th meridian (due to\r\n// floating point error) from changing their sign.\r\nexport var SPI = 3.14159265359;\r\n", "var exports = {};\r\nexport {exports as default};\r\n\r\nexports.greenwich = 0.0; //\"0dE\",\r\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\r\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\r\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\r\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\r\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\r\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\r\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\r\nexports.ferro = -17.666666666667; //\"17d40'W\",\r\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\r\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\r\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\r\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\r\n", "export default {\r\n  'mm': {to_meter: 0.001},\r\n  'cm': {to_meter: 0.01},\r\n  'ft': {to_meter: 0.3048},\r\n  'us-ft': {to_meter: 1200 / 3937},\r\n  'fath': {to_meter: 1.8288},\r\n  'kmi': {to_meter: 1852},\r\n  'us-ch': {to_meter: 20.1168402336805},\r\n  'us-mi': {to_meter: 1609.34721869444},\r\n  'km': {to_meter: 1000},\r\n  'ind-ft': {to_meter: 0.30479841},\r\n  'ind-yd': {to_meter: 0.91439523},\r\n  'mi': {to_meter: 1609.344},\r\n  'yd': {to_meter: 0.9144},\r\n  'ch': {to_meter: 20.1168},\r\n  'link': {to_meter: 0.201168},\r\n  'dm': {to_meter: 0.01},\r\n  'in': {to_meter: 0.0254},\r\n  'ind-ch': {to_meter: 20.11669506},\r\n  'us-in': {to_meter: 0.025400050800101},\r\n  'us-yd': {to_meter: 0.914401828803658}\r\n};\r\n", "var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\r\nexport default function match(obj, key) {\r\n  if (obj[key]) {\r\n    return obj[key];\r\n  }\r\n  var keys = Object.keys(obj);\r\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\r\n  var i = -1;\r\n  var testkey, processedKey;\r\n  while (++i < keys.length) {\r\n    testkey = keys[i];\r\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\r\n    if (processedKey === lkey) {\r\n      return obj[testkey];\r\n    }\r\n  }\r\n}\r\n", "import {D2R} from './constants/values';\r\nimport PrimeMeridian from './constants/PrimeMeridian';\r\nimport units from './constants/units';\r\nimport match from './match';\r\n\r\nexport default function(defData) {\r\n  var self = {};\r\n  var paramObj = defData.split('+').map(function(v) {\r\n    return v.trim();\r\n  }).filter(function(a) {\r\n    return a;\r\n  }).reduce(function(p, a) {\r\n    var split = a.split('=');\r\n    split.push(true);\r\n    p[split[0].toLowerCase()] = split[1];\r\n    return p;\r\n  }, {});\r\n  var paramName, paramVal, paramOutname;\r\n  var params = {\r\n    proj: 'projName',\r\n    datum: 'datumCode',\r\n    rf: function(v) {\r\n      self.rf = parseFloat(v);\r\n    },\r\n    lat_0: function(v) {\r\n      self.lat0 = v * D2R;\r\n    },\r\n    lat_1: function(v) {\r\n      self.lat1 = v * D2R;\r\n    },\r\n    lat_2: function(v) {\r\n      self.lat2 = v * D2R;\r\n    },\r\n    lat_ts: function(v) {\r\n      self.lat_ts = v * D2R;\r\n    },\r\n    lon_0: function(v) {\r\n      self.long0 = v * D2R;\r\n    },\r\n    lon_1: function(v) {\r\n      self.long1 = v * D2R;\r\n    },\r\n    lon_2: function(v) {\r\n      self.long2 = v * D2R;\r\n    },\r\n    alpha: function(v) {\r\n      self.alpha = parseFloat(v) * D2R;\r\n    },\r\n    gamma: function(v) {\r\n      self.rectified_grid_angle = parseFloat(v);\r\n    },\r\n    lonc: function(v) {\r\n      self.longc = v * D2R;\r\n    },\r\n    x_0: function(v) {\r\n      self.x0 = parseFloat(v);\r\n    },\r\n    y_0: function(v) {\r\n      self.y0 = parseFloat(v);\r\n    },\r\n    k_0: function(v) {\r\n      self.k0 = parseFloat(v);\r\n    },\r\n    k: function(v) {\r\n      self.k0 = parseFloat(v);\r\n    },\r\n    a: function(v) {\r\n      self.a = parseFloat(v);\r\n    },\r\n    b: function(v) {\r\n      self.b = parseFloat(v);\r\n    },\r\n    r: function(v) {\r\n      self.a = self.b = parseFloat(v);\r\n    },\r\n    r_a: function() {\r\n      self.R_A = true;\r\n    },\r\n    zone: function(v) {\r\n      self.zone = parseInt(v, 10);\r\n    },\r\n    south: function() {\r\n      self.utmSouth = true;\r\n    },\r\n    towgs84: function(v) {\r\n      self.datum_params = v.split(\",\").map(function(a) {\r\n        return parseFloat(a);\r\n      });\r\n    },\r\n    to_meter: function(v) {\r\n      self.to_meter = parseFloat(v);\r\n    },\r\n    units: function(v) {\r\n      self.units = v;\r\n      var unit = match(units, v);\r\n      if (unit) {\r\n        self.to_meter = unit.to_meter;\r\n      }\r\n    },\r\n    from_greenwich: function(v) {\r\n      self.from_greenwich = v * D2R;\r\n    },\r\n    pm: function(v) {\r\n      var pm = match(PrimeMeridian, v);\r\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\r\n    },\r\n    nadgrids: function(v) {\r\n      if (v === '@null') {\r\n        self.datumCode = 'none';\r\n      }\r\n      else {\r\n        self.nadgrids = v;\r\n      }\r\n    },\r\n    axis: function(v) {\r\n      var legalAxis = \"ewnsud\";\r\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\r\n        self.axis = v;\r\n      }\r\n    },\r\n    approx: function() {\r\n      self.approx = true;\r\n    }\r\n  };\r\n  for (paramName in paramObj) {\r\n    paramVal = paramObj[paramName];\r\n    if (paramName in params) {\r\n      paramOutname = params[paramName];\r\n      if (typeof paramOutname === 'function') {\r\n        paramOutname(paramVal);\r\n      }\r\n      else {\r\n        self[paramOutname] = paramVal;\r\n      }\r\n    }\r\n    else {\r\n      self[paramName] = paramVal;\r\n    }\r\n  }\r\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\r\n    self.datumCode = self.datumCode.toLowerCase();\r\n  }\r\n  return self;\r\n}\r\n", "export default parseString;\r\n\r\nvar NEUTRAL = 1;\r\nvar KEYWORD = 2;\r\nvar NUMBER = 3;\r\nvar QUOTED = 4;\r\nvar AFTERQUOTE = 5;\r\nvar ENDED = -1;\r\nvar whitespace = /\\s/;\r\nvar latin = /[A-Za-z]/;\r\nvar keyword = /[A-Za-z84_]/;\r\nvar endThings = /[,\\]]/;\r\nvar digets = /[\\d\\.E\\-\\+]/;\r\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\r\nfunction Parser(text) {\r\n  if (typeof text !== 'string') {\r\n    throw new Error('not a string');\r\n  }\r\n  this.text = text.trim();\r\n  this.level = 0;\r\n  this.place = 0;\r\n  this.root = null;\r\n  this.stack = [];\r\n  this.currentObject = null;\r\n  this.state = NEUTRAL;\r\n}\r\nParser.prototype.readCharicter = function() {\r\n  var char = this.text[this.place++];\r\n  if (this.state !== QUOTED) {\r\n    while (whitespace.test(char)) {\r\n      if (this.place >= this.text.length) {\r\n        return;\r\n      }\r\n      char = this.text[this.place++];\r\n    }\r\n  }\r\n  switch (this.state) {\r\n    case NEUTRAL:\r\n      return this.neutral(char);\r\n    case KEYWORD:\r\n      return this.keyword(char)\r\n    case QUOTED:\r\n      return this.quoted(char);\r\n    case AFTERQUOTE:\r\n      return this.afterquote(char);\r\n    case NUMBER:\r\n      return this.number(char);\r\n    case ENDED:\r\n      return;\r\n  }\r\n};\r\nParser.prototype.afterquote = function(char) {\r\n  if (char === '\"') {\r\n    this.word += '\"';\r\n    this.state = QUOTED;\r\n    return;\r\n  }\r\n  if (endThings.test(char)) {\r\n    this.word = this.word.trim();\r\n    this.afterItem(char);\r\n    return;\r\n  }\r\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\r\n};\r\nParser.prototype.afterItem = function(char) {\r\n  if (char === ',') {\r\n    if (this.word !== null) {\r\n      this.currentObject.push(this.word);\r\n    }\r\n    this.word = null;\r\n    this.state = NEUTRAL;\r\n    return;\r\n  }\r\n  if (char === ']') {\r\n    this.level--;\r\n    if (this.word !== null) {\r\n      this.currentObject.push(this.word);\r\n      this.word = null;\r\n    }\r\n    this.state = NEUTRAL;\r\n    this.currentObject = this.stack.pop();\r\n    if (!this.currentObject) {\r\n      this.state = ENDED;\r\n    }\r\n\r\n    return;\r\n  }\r\n};\r\nParser.prototype.number = function(char) {\r\n  if (digets.test(char)) {\r\n    this.word += char;\r\n    return;\r\n  }\r\n  if (endThings.test(char)) {\r\n    this.word = parseFloat(this.word);\r\n    this.afterItem(char);\r\n    return;\r\n  }\r\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\r\n};\r\nParser.prototype.quoted = function(char) {\r\n  if (char === '\"') {\r\n    this.state = AFTERQUOTE;\r\n    return;\r\n  }\r\n  this.word += char;\r\n  return;\r\n};\r\nParser.prototype.keyword = function(char) {\r\n  if (keyword.test(char)) {\r\n    this.word += char;\r\n    return;\r\n  }\r\n  if (char === '[') {\r\n    var newObjects = [];\r\n    newObjects.push(this.word);\r\n    this.level++;\r\n    if (this.root === null) {\r\n      this.root = newObjects;\r\n    } else {\r\n      this.currentObject.push(newObjects);\r\n    }\r\n    this.stack.push(this.currentObject);\r\n    this.currentObject = newObjects;\r\n    this.state = NEUTRAL;\r\n    return;\r\n  }\r\n  if (endThings.test(char)) {\r\n    this.afterItem(char);\r\n    return;\r\n  }\r\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\r\n};\r\nParser.prototype.neutral = function(char) {\r\n  if (latin.test(char)) {\r\n    this.word = char;\r\n    this.state = KEYWORD;\r\n    return;\r\n  }\r\n  if (char === '\"') {\r\n    this.word = '';\r\n    this.state = QUOTED;\r\n    return;\r\n  }\r\n  if (digets.test(char)) {\r\n    this.word = char;\r\n    this.state = NUMBER;\r\n    return;\r\n  }\r\n  if (endThings.test(char)) {\r\n    this.afterItem(char);\r\n    return;\r\n  }\r\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\r\n};\r\nParser.prototype.output = function() {\r\n  while (this.place < this.text.length) {\r\n    this.readCharicter();\r\n  }\r\n  if (this.state === ENDED) {\r\n    return this.root;\r\n  }\r\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\r\n};\r\n\r\nfunction parseString(txt) {\r\n  var parser = new Parser(txt);\r\n  return parser.output();\r\n}\r\n", "\r\n\r\nfunction mapit(obj, key, value) {\r\n  if (Array.isArray(key)) {\r\n    value.unshift(key);\r\n    key = null;\r\n  }\r\n  var thing = key ? {} : obj;\r\n\r\n  var out = value.reduce(function(newObj, item) {\r\n    sExpr(item, newObj);\r\n    return newObj\r\n  }, thing);\r\n  if (key) {\r\n    obj[key] = out;\r\n  }\r\n}\r\n\r\nexport function sExpr(v, obj) {\r\n  if (!Array.isArray(v)) {\r\n    obj[v] = true;\r\n    return;\r\n  }\r\n  var key = v.shift();\r\n  if (key === 'PARAMETER') {\r\n    key = v.shift();\r\n  }\r\n  if (v.length === 1) {\r\n    if (Array.isArray(v[0])) {\r\n      obj[key] = {};\r\n      sExpr(v[0], obj[key]);\r\n      return;\r\n    }\r\n    obj[key] = v[0];\r\n    return;\r\n  }\r\n  if (!v.length) {\r\n    obj[key] = true;\r\n    return;\r\n  }\r\n  if (key === 'TOWGS84') {\r\n    obj[key] = v;\r\n    return;\r\n  }\r\n  if (key === 'AXIS') {\r\n    if (!(key in obj)) {\r\n      obj[key] = [];\r\n    }\r\n    obj[key].push(v);\r\n    return;\r\n  }\r\n  if (!Array.isArray(key)) {\r\n    obj[key] = {};\r\n  }\r\n\r\n  var i;\r\n  switch (key) {\r\n    case 'UNIT':\r\n    case 'PRIMEM':\r\n    case 'VERT_DATUM':\r\n      obj[key] = {\r\n        name: v[0].toLowerCase(),\r\n        convert: v[1]\r\n      };\r\n      if (v.length === 3) {\r\n        sExpr(v[2], obj[key]);\r\n      }\r\n      return;\r\n    case 'SPHEROID':\r\n    case 'ELLIPSOID':\r\n      obj[key] = {\r\n        name: v[0],\r\n        a: v[1],\r\n        rf: v[2]\r\n      };\r\n      if (v.length === 4) {\r\n        sExpr(v[3], obj[key]);\r\n      }\r\n      return;\r\n    case 'EDATUM':\r\n    case 'ENGINEERINGDATUM':\r\n    case 'LOCAL_DATUM':\r\n    case 'DATUM':\r\n    case 'VERT_CS':\r\n    case 'VERTCRS':\r\n    case 'VERTICALCRS':\r\n      v[0] = ['name', v[0]];\r\n      mapit(obj, key, v);\r\n      return;\r\n    case 'COMPD_CS':\r\n    case 'COMPOUNDCRS':\r\n    case 'FITTED_CS':\r\n    // the followings are the crs defined in\r\n    // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11\r\n    case 'PROJECTEDCRS':\r\n    case 'PROJCRS':\r\n    case 'GEOGCS':\r\n    case 'GEOCCS':\r\n    case 'PROJCS':\r\n    case 'LOCAL_CS':\r\n    case 'GEODCRS':\r\n    case 'GEODETICCRS':\r\n    case 'GEODETICDATUM':\r\n    case 'ENGCRS':\r\n    case 'ENGINEERINGCRS':\r\n      v[0] = ['name', v[0]];\r\n      mapit(obj, key, v);\r\n      obj[key].type = key;\r\n      return;\r\n    default:\r\n      i = -1;\r\n      while (++i < v.length) {\r\n        if (!Array.isArray(v[i])) {\r\n          return sExpr(v, obj[key]);\r\n        }\r\n      }\r\n      return mapit(obj, key, v);\r\n  }\r\n}\r\n", "var D2R = 0.01745329251994329577;\r\nimport parser from './parser';\r\nimport {sExpr} from './process';\r\n\r\nvar knownTypes = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS', 'GEODCRS',\r\n  'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\r\n\r\nfunction rename(obj, params) {\r\n  var outName = params[0];\r\n  var inName = params[1];\r\n  if (!(outName in obj) && (inName in obj)) {\r\n    obj[outName] = obj[inName];\r\n    if (params.length === 3) {\r\n      obj[outName] = params[2](obj[outName]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction d2r(input) {\r\n  return input * D2R;\r\n}\r\n\r\nfunction cleanWKT(wkt) {\r\n  var keys = Object.keys(wkt);\r\n  for (var i = 0, ii = keys.length; i <ii; ++i) {\r\n    var key = keys[i];\r\n    // the followings are the crs defined in\r\n    // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11\r\n    if (knownTypes.indexOf(key) !== -1) {\r\n      setPropertiesFromWkt(wkt[key]);\r\n    }\r\n    if (typeof wkt[key] === 'object') {\r\n      cleanWKT(wkt[key]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction setPropertiesFromWkt(wkt) {\r\n  if (wkt.AUTHORITY) {\r\n    var authority = Object.keys(wkt.AUTHORITY)[0];\r\n    if (authority && authority in wkt.AUTHORITY) {\r\n      wkt.title = authority + ':' + wkt.AUTHORITY[authority];\r\n    }\r\n  }\r\n  if (wkt.type === 'GEOGCS') {\r\n    wkt.projName = 'longlat';\r\n  } else if (wkt.type === 'LOCAL_CS') {\r\n    wkt.projName = 'identity';\r\n    wkt.local = true;\r\n  } else {\r\n    if (typeof wkt.PROJECTION === 'object') {\r\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\r\n    } else {\r\n      wkt.projName = wkt.PROJECTION;\r\n    }\r\n  }\r\n  if (wkt.AXIS) {\r\n    var axisOrder = '';\r\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\r\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\r\n      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\r\n        axisOrder += 'n';\r\n      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\r\n        axisOrder += 's';\r\n      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\r\n        axisOrder += 'e';\r\n      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\r\n        axisOrder += 'w';\r\n      }\r\n    }\r\n    if (axisOrder.length === 2) {\r\n      axisOrder += 'u';\r\n    }\r\n    if (axisOrder.length === 3) {\r\n      wkt.axis = axisOrder;\r\n    }\r\n  }\r\n  if (wkt.UNIT) {\r\n    wkt.units = wkt.UNIT.name.toLowerCase();\r\n    if (wkt.units === 'metre') {\r\n      wkt.units = 'meter';\r\n    }\r\n    if (wkt.UNIT.convert) {\r\n      if (wkt.type === 'GEOGCS') {\r\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\r\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\r\n        }\r\n      } else {\r\n        wkt.to_meter = wkt.UNIT.convert;\r\n      }\r\n    }\r\n  }\r\n  var geogcs = wkt.GEOGCS;\r\n  if (wkt.type === 'GEOGCS') {\r\n    geogcs = wkt;\r\n  }\r\n  if (geogcs) {\r\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\r\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\r\n    //}\r\n    if (geogcs.DATUM) {\r\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\r\n    } else {\r\n      wkt.datumCode = geogcs.name.toLowerCase();\r\n    }\r\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\r\n      wkt.datumCode = wkt.datumCode.slice(2);\r\n    }\r\n    if (wkt.datumCode === 'new_zealand_1949') {\r\n      wkt.datumCode = 'nzgd49';\r\n    }\r\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\r\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\r\n        wkt.sphere = true;\r\n      }\r\n      wkt.datumCode = 'wgs84';\r\n    }\r\n    if (wkt.datumCode === 'belge_1972') {\r\n      wkt.datumCode = 'rnb72';\r\n    }\r\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\r\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\r\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\r\n        wkt.ellps = 'intl';\r\n      }\r\n\r\n      wkt.a = geogcs.DATUM.SPHEROID.a;\r\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\r\n    }\r\n\r\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\r\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\r\n    }\r\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\r\n      wkt.datumCode = 'osgb36';\r\n    }\r\n    if (~wkt.datumCode.indexOf('osni_1952')) {\r\n      wkt.datumCode = 'osni52';\r\n    }\r\n    if (~wkt.datumCode.indexOf('tm65')\r\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\r\n      wkt.datumCode = 'ire65';\r\n    }\r\n    if (wkt.datumCode === 'ch1903+') {\r\n      wkt.datumCode = 'ch1903';\r\n    }\r\n    if (~wkt.datumCode.indexOf('israel')) {\r\n      wkt.datumCode = 'isr93';\r\n    }\r\n  }\r\n  if (wkt.b && !isFinite(wkt.b)) {\r\n    wkt.b = wkt.a;\r\n  }\r\n\r\n  function toMeter(input) {\r\n    var ratio = wkt.to_meter || 1;\r\n    return input * ratio;\r\n  }\r\n  var renamer = function(a) {\r\n    return rename(wkt, a);\r\n  };\r\n  var list = [\r\n    ['standard_parallel_1', 'Standard_Parallel_1'],\r\n    ['standard_parallel_1', 'Latitude of 1st standard parallel'],\r\n    ['standard_parallel_2', 'Standard_Parallel_2'],\r\n    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\r\n    ['false_easting', 'False_Easting'],\r\n    ['false_easting', 'False easting'],\r\n    ['false-easting', 'Easting at false origin'],\r\n    ['false_northing', 'False_Northing'],\r\n    ['false_northing', 'False northing'],\r\n    ['false_northing', 'Northing at false origin'],\r\n    ['central_meridian', 'Central_Meridian'],\r\n    ['central_meridian', 'Longitude of natural origin'],\r\n    ['central_meridian', 'Longitude of false origin'],\r\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\r\n    ['latitude_of_origin', 'Central_Parallel'],\r\n    ['latitude_of_origin', 'Latitude of natural origin'],\r\n    ['latitude_of_origin', 'Latitude of false origin'],\r\n    ['scale_factor', 'Scale_Factor'],\r\n    ['k0', 'scale_factor'],\r\n    ['latitude_of_center', 'Latitude_Of_Center'],\r\n    ['latitude_of_center', 'Latitude_of_center'],\r\n    ['lat0', 'latitude_of_center', d2r],\r\n    ['longitude_of_center', 'Longitude_Of_Center'],\r\n    ['longitude_of_center', 'Longitude_of_center'],\r\n    ['longc', 'longitude_of_center', d2r],\r\n    ['x0', 'false_easting', toMeter],\r\n    ['y0', 'false_northing', toMeter],\r\n    ['long0', 'central_meridian', d2r],\r\n    ['lat0', 'latitude_of_origin', d2r],\r\n    ['lat0', 'standard_parallel_1', d2r],\r\n    ['lat1', 'standard_parallel_1', d2r],\r\n    ['lat2', 'standard_parallel_2', d2r],\r\n    ['azimuth', 'Azimuth'],\r\n    ['alpha', 'azimuth', d2r],\r\n    ['srsCode', 'name']\r\n  ];\r\n  list.forEach(renamer);\r\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\r\n    wkt.long0 = wkt.longc;\r\n  }\r\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\r\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\r\n    wkt.lat_ts = wkt.lat1;\r\n  } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === 'Polar_Stereographic') {\r\n    wkt.lat_ts = wkt.lat0;\r\n    wkt.lat0 = d2r(wkt.lat0 > 0 ? 90 : -90);\r\n  }\r\n}\r\nexport default function(wkt) {\r\n  var lisp = parser(wkt);\r\n  var type = lisp[0];\r\n  var obj = {};\r\n  sExpr(lisp, obj);\r\n  cleanWKT(obj);\r\n  return obj[type];\r\n}\r\n", "import globals from './global';\r\nimport parseProj from './projString';\r\nimport wkt from 'wkt-parser';\r\n\r\nfunction defs(name) {\r\n  /*global console*/\r\n  var that = this;\r\n  if (arguments.length === 2) {\r\n    var def = arguments[1];\r\n    if (typeof def === 'string') {\r\n      if (def.charAt(0) === '+') {\r\n        defs[name] = parseProj(arguments[1]);\r\n      }\r\n      else {\r\n        defs[name] = wkt(arguments[1]);\r\n      }\r\n    } else {\r\n      defs[name] = def;\r\n    }\r\n  }\r\n  else if (arguments.length === 1) {\r\n    if (Array.isArray(name)) {\r\n      return name.map(function(v) {\r\n        if (Array.isArray(v)) {\r\n          defs.apply(that, v);\r\n        }\r\n        else {\r\n          defs(v);\r\n        }\r\n      });\r\n    }\r\n    else if (typeof name === 'string') {\r\n      if (name in defs) {\r\n        return defs[name];\r\n      }\r\n    }\r\n    else if ('EPSG' in name) {\r\n      defs['EPSG:' + name.EPSG] = name;\r\n    }\r\n    else if ('ESRI' in name) {\r\n      defs['ESRI:' + name.ESRI] = name;\r\n    }\r\n    else if ('IAU2000' in name) {\r\n      defs['IAU2000:' + name.IAU2000] = name;\r\n    }\r\n    else {\r\n      console.log(name);\r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n}\r\nglobals(defs);\r\nexport default defs;\r\n", "import defs from './defs';\r\nimport wkt from 'wkt-parser';\r\nimport projStr from './projString';\r\nimport match from './match';\r\nfunction testObj(code){\r\n  return typeof code === 'string';\r\n}\r\nfunction testDef(code){\r\n  return code in defs;\r\n}\r\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\r\nfunction testWKT(code){\r\n  return codeWords.some(function (word) {\r\n    return code.indexOf(word) > -1;\r\n  });\r\n}\r\nvar codes = ['3857', '900913', '3785', '102113'];\r\nfunction checkMercator(item) {\r\n  var auth = match(item, 'authority');\r\n  if (!auth) {\r\n    return;\r\n  }\r\n  var code = match(auth, 'epsg');\r\n  return code && codes.indexOf(code) > -1;\r\n}\r\nfunction checkProjStr(item) {\r\n  var ext = match(item, 'extension');\r\n  if (!ext) {\r\n    return;\r\n  }\r\n  return match(ext, 'proj4');\r\n}\r\nfunction testProj(code){\r\n  return code[0] === '+';\r\n}\r\nfunction parse(code){\r\n  if (testObj(code)) {\r\n    //check to see if this is a WKT string\r\n    if (testDef(code)) {\r\n      return defs[code];\r\n    }\r\n    if (testWKT(code)) {\r\n      var out = wkt(code);\r\n      // test of spetial case, due to this being a very common and often malformed\r\n      if (checkMercator(out)) {\r\n        return defs['EPSG:3857'];\r\n      }\r\n      var maybeProjStr = checkProjStr(out);\r\n      if (maybeProjStr) {\r\n        return projStr(maybeProjStr);\r\n      }\r\n      return out;\r\n    }\r\n    if (testProj(code)) {\r\n      return projStr(code);\r\n    }\r\n  }else{\r\n    return code;\r\n  }\r\n}\r\n\r\nexport default parse;\r\n", "export default function(destination, source) {\r\n  destination = destination || {};\r\n  var value, property;\r\n  if (!source) {\r\n    return destination;\r\n  }\r\n  for (property in source) {\r\n    value = source[property];\r\n    if (value !== undefined) {\r\n      destination[property] = value;\r\n    }\r\n  }\r\n  return destination;\r\n}\r\n", "export default function(eccent, sinphi, cosphi) {\r\n  var con = eccent * sinphi;\r\n  return cosphi / (Math.sqrt(1 - con * con));\r\n}", "export default function(x) {\r\n  return x<0 ? -1 : 1;\r\n}", "\r\nimport {TWO_PI, SPI} from '../constants/values';\r\nimport sign from './sign';\r\n\r\nexport default function(x) {\r\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\r\n}\r\n", "import {HALF_PI} from '../constants/values';\r\n\r\nexport default function(eccent, phi, sinphi) {\r\n  var con = eccent * sinphi;\r\n  var com = 0.5 * eccent;\r\n  con = Math.pow(((1 - con) / (1 + con)), com);\r\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\r\n}\r\n", "import {HALF_PI} from '../constants/values';\r\n\r\nexport default function(eccent, ts) {\r\n  var eccnth = 0.5 * eccent;\r\n  var con, dphi;\r\n  var phi = HALF_PI - 2 * Math.atan(ts);\r\n  for (var i = 0; i <= 15; i++) {\r\n    con = eccent * Math.sin(phi);\r\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\r\n    phi += dphi;\r\n    if (Math.abs(dphi) <= 0.0000000001) {\r\n      return phi;\r\n    }\r\n  }\r\n  //console.log(\"phi2z has NoConvergence\");\r\n  return -9999;\r\n}\r\n", "import msfnz from '../common/msfnz';\r\n\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport tsfnz from '../common/tsfnz';\r\nimport phi2z from '../common/phi2z';\r\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\r\nexport function init() {\r\n  var con = this.b / this.a;\r\n  this.es = 1 - con * con;\r\n  if(!('x0' in this)){\r\n    this.x0 = 0;\r\n  }\r\n  if(!('y0' in this)){\r\n    this.y0 = 0;\r\n  }\r\n  this.e = Math.sqrt(this.es);\r\n  if (this.lat_ts) {\r\n    if (this.sphere) {\r\n      this.k0 = Math.cos(this.lat_ts);\r\n    }\r\n    else {\r\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\r\n    }\r\n  }\r\n  else {\r\n    if (!this.k0) {\r\n      if (this.k) {\r\n        this.k0 = this.k;\r\n      }\r\n      else {\r\n        this.k0 = 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* Mercator forward equations--mapping lat,long to x,y\r\n  --------------------------------------------------*/\r\n\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  // convert to radians\r\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\r\n    return null;\r\n  }\r\n\r\n  var x, y;\r\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\r\n    return null;\r\n  }\r\n  else {\r\n    if (this.sphere) {\r\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\r\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\r\n    }\r\n    else {\r\n      var sinphi = Math.sin(lat);\r\n      var ts = tsfnz(this.e, lat, sinphi);\r\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\r\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\r\n    }\r\n    p.x = x;\r\n    p.y = y;\r\n    return p;\r\n  }\r\n}\r\n\r\n/* Mercator inverse equations--mapping x,y to lat/long\r\n  --------------------------------------------------*/\r\nexport function inverse(p) {\r\n\r\n  var x = p.x - this.x0;\r\n  var y = p.y - this.y0;\r\n  var lon, lat;\r\n\r\n  if (this.sphere) {\r\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\r\n  }\r\n  else {\r\n    var ts = Math.exp(-y / (this.a * this.k0));\r\n    lat = phi2z(this.e, ts);\r\n    if (lat === -9999) {\r\n      return null;\r\n    }\r\n  }\r\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "export function init() {\r\n  //no-op for longlat\r\n}\r\n\r\nfunction identity(pt) {\r\n  return pt;\r\n}\r\nexport {identity as forward};\r\nexport {identity as inverse};\r\nexport var names = [\"longlat\", \"identity\"];\r\nexport default {\r\n  init: init,\r\n  forward: identity,\r\n  inverse: identity,\r\n  names: names\r\n};\r\n", "import merc from \"./projections/merc\";\r\nimport longlat from \"./projections/longlat\";\r\nvar projs = [merc, longlat];\r\nvar names = {};\r\nvar projStore = [];\r\n\r\nfunction add(proj, i) {\r\n  var len = projStore.length;\r\n  if (!proj.names) {\r\n    console.log(i);\r\n    return true;\r\n  }\r\n  projStore[len] = proj;\r\n  proj.names.forEach(function(n) {\r\n    names[n.toLowerCase()] = len;\r\n  });\r\n  return this;\r\n}\r\n\r\nexport {add};\r\n\r\nexport function get(name) {\r\n  if (!name) {\r\n    return false;\r\n  }\r\n  var n = name.toLowerCase();\r\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\r\n    return projStore[names[n]];\r\n  }\r\n}\r\n\r\nexport function start() {\r\n  projs.forEach(add);\r\n}\r\nexport default {\r\n  start: start,\r\n  add: add,\r\n  get: get\r\n};\r\n", "var exports = {};\r\nexport {exports as default};\r\nexports.MERIT = {\r\n  a: 6378137.0,\r\n  rf: 298.257,\r\n  ellipseName: \"MERIT 1983\"\r\n};\r\n\r\nexports.SGS85 = {\r\n  a: 6378136.0,\r\n  rf: 298.257,\r\n  ellipseName: \"Soviet Geodetic System 85\"\r\n};\r\n\r\nexports.GRS80 = {\r\n  a: 6378137.0,\r\n  rf: 298.257222101,\r\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\r\n};\r\n\r\nexports.IAU76 = {\r\n  a: 6378140.0,\r\n  rf: 298.257,\r\n  ellipseName: \"IAU 1976\"\r\n};\r\n\r\nexports.airy = {\r\n  a: 6377563.396,\r\n  b: 6356256.910,\r\n  ellipseName: \"Airy 1830\"\r\n};\r\n\r\nexports.APL4 = {\r\n  a: 6378137,\r\n  rf: 298.25,\r\n  ellipseName: \"Appl. Physics. 1965\"\r\n};\r\n\r\nexports.NWL9D = {\r\n  a: 6378145.0,\r\n  rf: 298.25,\r\n  ellipseName: \"Naval Weapons Lab., 1965\"\r\n};\r\n\r\nexports.mod_airy = {\r\n  a: 6377340.189,\r\n  b: 6356034.446,\r\n  ellipseName: \"Modified Airy\"\r\n};\r\n\r\nexports.andrae = {\r\n  a: 6377104.43,\r\n  rf: 300.0,\r\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\r\n};\r\n\r\nexports.aust_SA = {\r\n  a: 6378160.0,\r\n  rf: 298.25,\r\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\r\n};\r\n\r\nexports.GRS67 = {\r\n  a: 6378160.0,\r\n  rf: 298.2471674270,\r\n  ellipseName: \"GRS 67(IUGG 1967)\"\r\n};\r\n\r\nexports.bessel = {\r\n  a: 6377397.155,\r\n  rf: 299.1528128,\r\n  ellipseName: \"Bessel 1841\"\r\n};\r\n\r\nexports.bess_nam = {\r\n  a: 6377483.865,\r\n  rf: 299.1528128,\r\n  ellipseName: \"Bessel 1841 (Namibia)\"\r\n};\r\n\r\nexports.clrk66 = {\r\n  a: 6378206.4,\r\n  b: 6356583.8,\r\n  ellipseName: \"Clarke 1866\"\r\n};\r\n\r\nexports.clrk80 = {\r\n  a: 6378249.145,\r\n  rf: 293.4663,\r\n  ellipseName: \"Clarke 1880 mod.\"\r\n};\r\n\r\nexports.clrk80ign = {\r\n  a: 6378249.2,\r\n  b: 6356515,\r\n  rf: 293.4660213,\r\n  ellipseName: \"Clarke 1880 (IGN)\"\r\n};\r\n\r\nexports.clrk58 = {\r\n  a: 6378293.645208759,\r\n  rf: 294.2606763692654,\r\n  ellipseName: \"Clarke 1858\"\r\n};\r\n\r\nexports.CPM = {\r\n  a: 6375738.7,\r\n  rf: 334.29,\r\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\r\n};\r\n\r\nexports.delmbr = {\r\n  a: 6376428.0,\r\n  rf: 311.5,\r\n  ellipseName: \"Delambre 1810 (Belgium)\"\r\n};\r\n\r\nexports.engelis = {\r\n  a: 6378136.05,\r\n  rf: 298.2566,\r\n  ellipseName: \"Engelis 1985\"\r\n};\r\n\r\nexports.evrst30 = {\r\n  a: 6377276.345,\r\n  rf: 300.8017,\r\n  ellipseName: \"Everest 1830\"\r\n};\r\n\r\nexports.evrst48 = {\r\n  a: 6377304.063,\r\n  rf: 300.8017,\r\n  ellipseName: \"Everest 1948\"\r\n};\r\n\r\nexports.evrst56 = {\r\n  a: 6377301.243,\r\n  rf: 300.8017,\r\n  ellipseName: \"Everest 1956\"\r\n};\r\n\r\nexports.evrst69 = {\r\n  a: 6377295.664,\r\n  rf: 300.8017,\r\n  ellipseName: \"Everest 1969\"\r\n};\r\n\r\nexports.evrstSS = {\r\n  a: 6377298.556,\r\n  rf: 300.8017,\r\n  ellipseName: \"Everest (Sabah & Sarawak)\"\r\n};\r\n\r\nexports.fschr60 = {\r\n  a: 6378166.0,\r\n  rf: 298.3,\r\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\r\n};\r\n\r\nexports.fschr60m = {\r\n  a: 6378155.0,\r\n  rf: 298.3,\r\n  ellipseName: \"Fischer 1960\"\r\n};\r\n\r\nexports.fschr68 = {\r\n  a: 6378150.0,\r\n  rf: 298.3,\r\n  ellipseName: \"Fischer 1968\"\r\n};\r\n\r\nexports.helmert = {\r\n  a: 6378200.0,\r\n  rf: 298.3,\r\n  ellipseName: \"Helmert 1906\"\r\n};\r\n\r\nexports.hough = {\r\n  a: 6378270.0,\r\n  rf: 297.0,\r\n  ellipseName: \"Hough\"\r\n};\r\n\r\nexports.intl = {\r\n  a: 6378388.0,\r\n  rf: 297.0,\r\n  ellipseName: \"International 1909 (Hayford)\"\r\n};\r\n\r\nexports.kaula = {\r\n  a: 6378163.0,\r\n  rf: 298.24,\r\n  ellipseName: \"Kaula 1961\"\r\n};\r\n\r\nexports.lerch = {\r\n  a: 6378139.0,\r\n  rf: 298.257,\r\n  ellipseName: \"Lerch 1979\"\r\n};\r\n\r\nexports.mprts = {\r\n  a: 6397300.0,\r\n  rf: 191.0,\r\n  ellipseName: \"Maupertius 1738\"\r\n};\r\n\r\nexports.new_intl = {\r\n  a: 6378157.5,\r\n  b: 6356772.2,\r\n  ellipseName: \"New International 1967\"\r\n};\r\n\r\nexports.plessis = {\r\n  a: 6376523.0,\r\n  rf: 6355863.0,\r\n  ellipseName: \"Plessis 1817 (France)\"\r\n};\r\n\r\nexports.krass = {\r\n  a: 6378245.0,\r\n  rf: 298.3,\r\n  ellipseName: \"Krassovsky, 1942\"\r\n};\r\n\r\nexports.SEasia = {\r\n  a: 6378155.0,\r\n  b: 6356773.3205,\r\n  ellipseName: \"Southeast Asia\"\r\n};\r\n\r\nexports.walbeck = {\r\n  a: 6376896.0,\r\n  b: 6355834.8467,\r\n  ellipseName: \"Walbeck\"\r\n};\r\n\r\nexports.WGS60 = {\r\n  a: 6378165.0,\r\n  rf: 298.3,\r\n  ellipseName: \"WGS 60\"\r\n};\r\n\r\nexports.WGS66 = {\r\n  a: 6378145.0,\r\n  rf: 298.25,\r\n  ellipseName: \"WGS 66\"\r\n};\r\n\r\nexports.WGS7 = {\r\n  a: 6378135.0,\r\n  rf: 298.26,\r\n  ellipseName: \"WGS 72\"\r\n};\r\n\r\nexport var WGS84 = exports.WGS84 = {\r\n  a: 6378137.0,\r\n  rf: 298.257223563,\r\n  ellipseName: \"WGS 84\"\r\n};\r\n\r\nexports.sphere = {\r\n  a: 6370997.0,\r\n  b: 6370997.0,\r\n  ellipseName: \"Normal Sphere (r=6370997)\"\r\n};\r\n", "import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\r\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\r\nimport match from './match';\r\n\r\nexport function eccentricity(a, b, rf, R_A) {\r\n  var a2 = a * a; // used in geocentric\r\n  var b2 = b * b; // used in geocentric\r\n  var es = (a2 - b2) / a2; // e ^ 2\r\n  var e = 0;\r\n  if (R_A) {\r\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\r\n    a2 = a * a;\r\n    es = 0;\r\n  } else {\r\n    e = Math.sqrt(es); // eccentricity\r\n  }\r\n  var ep2 = (a2 - b2) / b2; // used in geocentric\r\n  return {\r\n    es: es,\r\n    e: e,\r\n    ep2: ep2\r\n  };\r\n}\r\nexport function sphere(a, b, rf, ellps, sphere) {\r\n  if (!a) { // do we have an ellipsoid?\r\n    var ellipse = match(Ellipsoid, ellps);\r\n    if (!ellipse) {\r\n      ellipse = WGS84;\r\n    }\r\n    a = ellipse.a;\r\n    b = ellipse.b;\r\n    rf = ellipse.rf;\r\n  }\r\n\r\n  if (rf && !b) {\r\n    b = (1.0 - 1.0 / rf) * a;\r\n  }\r\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\r\n    sphere = true;\r\n    b = a;\r\n  }\r\n  return {\r\n    a: a,\r\n    b: b,\r\n    rf: rf,\r\n    sphere: sphere\r\n  };\r\n}\r\n", "var datums = {\r\n  wgs84: {\r\n    towgs84: \"0,0,0\",\r\n    ellipse: \"WGS84\",\r\n    datumName: \"WGS84\"\r\n  },\r\n  ch1903: {\r\n    towgs84: \"674.374,15.056,405.346\",\r\n    ellipse: \"bessel\",\r\n    datumName: \"swiss\"\r\n  },\r\n  ggrs87: {\r\n    towgs84: \"-199.87,74.79,246.62\",\r\n    ellipse: \"GRS80\",\r\n    datumName: \"Greek_Geodetic_Reference_System_1987\"\r\n  },\r\n  nad83: {\r\n    towgs84: \"0,0,0\",\r\n    ellipse: \"GRS80\",\r\n    datumName: \"North_American_Datum_1983\"\r\n  },\r\n  nad27: {\r\n    nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\r\n    ellipse: \"clrk66\",\r\n    datumName: \"North_American_Datum_1927\"\r\n  },\r\n  potsdam: {\r\n    towgs84: \"598.1,73.7,418.2,0.202,0.045,-2.455,6.7\",\r\n    ellipse: \"bessel\",\r\n    datumName: \"Potsdam Rauenberg 1950 DHDN\"\r\n  },\r\n  carthage: {\r\n    towgs84: \"-263.0,6.0,431.0\",\r\n    ellipse: \"clark80\",\r\n    datumName: \"Carthage 1934 Tunisia\"\r\n  },\r\n  hermannskogel: {\r\n    towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\r\n    ellipse: \"bessel\",\r\n    datumName: \"Hermannskogel\"\r\n  },\r\n  mgi: {\r\n    towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\r\n    ellipse: \"bessel\",\r\n    datumName: \"Militar-Geographische Institut\",\r\n  },\r\n  osni52: {\r\n    towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\r\n    ellipse: \"airy\",\r\n    datumName: \"Irish National\"\r\n  },\r\n  ire65: {\r\n    towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\r\n    ellipse: \"mod_airy\",\r\n    datumName: \"Ireland 1965\"\r\n  },\r\n  rassadiran: {\r\n    towgs84: \"-133.63,-157.5,-158.62\",\r\n    ellipse: \"intl\",\r\n    datumName: \"Rassadiran\"\r\n  },\r\n  nzgd49: {\r\n    towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\r\n    ellipse: \"intl\",\r\n    datumName: \"New Zealand Geodetic Datum 1949\"\r\n  },\r\n  osgb36: {\r\n    towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\r\n    ellipse: \"airy\",\r\n    datumName: \"Ordnance Survey of Great Britain 1936\"\r\n  },\r\n  s_jtsk: {\r\n    towgs84: \"589,76,480\",\r\n    ellipse: 'bessel',\r\n    datumName: 'S-JTSK (Ferro)'\r\n  },\r\n  beduaram: {\r\n    towgs84: '-106,-87,188',\r\n    ellipse: 'clrk80',\r\n    datumName: 'Beduaram'\r\n  },\r\n  gunung_segara: {\r\n    towgs84: '-403,684,41',\r\n    ellipse: 'bessel',\r\n    datumName: 'Gunung Segara Jakarta'\r\n  },\r\n  rnb72: {\r\n    towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\r\n    ellipse: \"intl\",\r\n    datumName: \"Reseau National Belge 1972\"\r\n  }\r\n};\r\n\r\nfor (var key in datums) {\r\n  var datum = datums[key];\r\n  datums[datum.datumName] = datum;\r\n}\r\n\r\nexport default datums;\r\n", "import {PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\r\n\r\nfunction datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {\r\n  var out = {};\r\n\r\n  if (datumCode === undefined || datumCode === 'none') {\r\n    out.datum_type = PJD_NODATUM;\r\n  } else {\r\n    out.datum_type = PJD_WGS84;\r\n  }\r\n\r\n  if (datum_params) {\r\n    out.datum_params = datum_params.map(parseFloat);\r\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\r\n      out.datum_type = PJD_3PARAM;\r\n    }\r\n    if (out.datum_params.length > 3) {\r\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\r\n        out.datum_type = PJD_7PARAM;\r\n        out.datum_params[3] *= SEC_TO_RAD;\r\n        out.datum_params[4] *= SEC_TO_RAD;\r\n        out.datum_params[5] *= SEC_TO_RAD;\r\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (nadgrids) {\r\n    out.datum_type = PJD_GRIDSHIFT;\r\n    out.grids = nadgrids;\r\n  }\r\n  out.a = a; //datum object also uses these values\r\n  out.b = b;\r\n  out.es = es;\r\n  out.ep2 = ep2;\r\n  return out;\r\n}\r\n\r\nexport default datum;\r\n", "/**\r\n * Resources for details of NTv2 file formats:\r\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\r\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\r\n */\r\n\r\nvar loadedNadgrids = {};\r\n\r\n/**\r\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\r\n * as an ArrayBuffer.\r\n */\r\nexport default function nadgrid(key, data) {\r\n  var view = new DataView(data);\r\n  var isLittleEndian = detectLittleEndian(view);\r\n  var header = readHeader(view, isLittleEndian);\r\n  var subgrids = readSubgrids(view, header, isLittleEndian);\r\n  var nadgrid = {header: header, subgrids: subgrids};\r\n  loadedNadgrids[key] = nadgrid;\r\n  return nadgrid;\r\n}\r\n\r\n/**\r\n * Given a proj4 value for nadgrids, return an array of loaded grids\r\n */\r\nexport function getNadgrids(nadgrids) {\r\n  // Format details: http://proj.maptools.org/gen_parms.html\r\n  if (nadgrids === undefined) { return null; }\r\n  var grids = nadgrids.split(',');\r\n  return grids.map(parseNadgridString);\r\n}\r\n\r\nfunction parseNadgridString(value) {\r\n  if (value.length === 0) {\r\n    return null;\r\n  }\r\n  var optional = value[0] === '@';\r\n  if (optional) {\r\n    value = value.slice(1);\r\n  }\r\n  if (value === 'null') {\r\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\r\n  }\r\n  return {\r\n    name: value,\r\n    mandatory: !optional,\r\n    grid: loadedNadgrids[value] || null,\r\n    isNull: false\r\n  };\r\n}\r\n\r\nfunction secondsToRadians(seconds) {\r\n  return (seconds / 3600) * Math.PI / 180;\r\n}\r\n\r\nfunction detectLittleEndian(view) {\r\n  var nFields = view.getInt32(8, false);\r\n  if (nFields === 11) {\r\n    return false;\r\n  }\r\n  nFields = view.getInt32(8, true);\r\n  if (nFields !== 11) {\r\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction readHeader(view, isLittleEndian) {\r\n  return {\r\n    nFields: view.getInt32(8, isLittleEndian),\r\n    nSubgridFields: view.getInt32(24, isLittleEndian),\r\n    nSubgrids: view.getInt32(40, isLittleEndian),\r\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\r\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\r\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\r\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\r\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\r\n  };\r\n}\r\n\r\nfunction decodeString(view, start, end) {\r\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\r\n}\r\n\r\nfunction readSubgrids(view, header, isLittleEndian) {\r\n  var gridOffset = 176;\r\n  var grids = [];\r\n  for (var i = 0; i < header.nSubgrids; i++) {\r\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\r\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\r\n    var lngColumnCount = Math.round(\r\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\r\n    var latColumnCount = Math.round(\r\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\r\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\r\n    grids.push({\r\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\r\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\r\n      lim: [lngColumnCount, latColumnCount],\r\n      count: subHeader.gridNodeCount,\r\n      cvs: mapNodes(nodes)\r\n    });\r\n    gridOffset += 176 + subHeader.gridNodeCount * 16;\r\n  }\r\n  return grids;\r\n}\r\n\r\nfunction mapNodes(nodes) {\r\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\r\n}\r\n\r\nfunction readGridHeader(view, offset, isLittleEndian) {\r\n  return {\r\n    name: decodeString(view, offset + 8, offset + 16).trim(),\r\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\r\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\r\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\r\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\r\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\r\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\r\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\r\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\r\n  };\r\n}\r\n\r\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\r\n  var nodesOffset = offset + 176;\r\n  var gridRecordLength = 16;\r\n  var gridShiftRecords = [];\r\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\r\n    var record = {\r\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\r\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\r\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\r\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\r\n    };\r\n    gridShiftRecords.push(record);\r\n  }\r\n  return gridShiftRecords;\r\n}\r\n", "import parseCode from './parseCode';\r\nimport extend from './extend';\r\nimport projections from './projections';\r\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\r\nimport Datum from './constants/Datum';\r\nimport datum from './datum';\r\nimport match from './match';\r\nimport {getNadgrids} from \"./nadgrid\";\r\n\r\nfunction Projection(srsCode,callback) {\r\n  if (!(this instanceof Projection)) {\r\n    return new Projection(srsCode);\r\n  }\r\n  callback = callback || function(error){\r\n    if(error){\r\n      throw error;\r\n    }\r\n  };\r\n  var json = parseCode(srsCode);\r\n  if(typeof json !== 'object'){\r\n    callback('Could not parse to valid json: ' + srsCode);\r\n    return;\r\n  }\r\n  var ourProj = Projection.projections.get(json.projName);\r\n  if(!ourProj){\r\n    callback('Could not get projection name from: ' + srsCode);\r\n    return;\r\n  }\r\n  if (json.datumCode && json.datumCode !== 'none') {\r\n    var datumDef = match(Datum, json.datumCode);\r\n    if (datumDef) {\r\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\r\n      json.ellps = datumDef.ellipse;\r\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\r\n    }\r\n  }\r\n  json.k0 = json.k0 || 1.0;\r\n  json.axis = json.axis || 'enu';\r\n  json.ellps = json.ellps || 'wgs84';\r\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\r\n\r\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\r\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\r\n  var nadgrids = getNadgrids(json.nadgrids);\r\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\r\n    nadgrids);\r\n\r\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\r\n  extend(this, ourProj); // transfer all the methods from the projection\r\n\r\n  // copy the 4 things over we calculated in deriveConstants.sphere\r\n  this.a = sphere_.a;\r\n  this.b = sphere_.b;\r\n  this.rf = sphere_.rf;\r\n  this.sphere = sphere_.sphere;\r\n\r\n  // copy the 3 things we calculated in deriveConstants.eccentricity\r\n  this.es = ecc.es;\r\n  this.e = ecc.e;\r\n  this.ep2 = ecc.ep2;\r\n\r\n  // add in the datum object\r\n  this.datum = datumObj;\r\n\r\n  // init the projection\r\n  this.init();\r\n\r\n  // legecy callback from back in the day when it went to spatialreference.org\r\n  callback(null, this);\r\n\r\n}\r\nProjection.projections = projections;\r\nProjection.projections.start();\r\nexport default Projection;\r\n", "'use strict';\r\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\r\nexport function compareDatums(source, dest) {\r\n  if (source.datum_type !== dest.datum_type) {\r\n    return false; // false, datums are not equal\r\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\r\n    // the tolerance for es is to ensure that GRS80 and WGS84\r\n    // are considered identical\r\n    return false;\r\n  } else if (source.datum_type === PJD_3PARAM) {\r\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\r\n  } else if (source.datum_type === PJD_7PARAM) {\r\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\r\n  } else {\r\n    return true; // datums are equal\r\n  }\r\n} // cs_compare_datums()\r\n\r\n/*\r\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\r\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\r\n * according to the current ellipsoid parameters.\r\n *\r\n *    Latitude  : Geodetic latitude in radians                     (input)\r\n *    Longitude : Geodetic longitude in radians                    (input)\r\n *    Height    : Geodetic height, in meters                       (input)\r\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\r\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\r\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\r\n *\r\n */\r\nexport function geodeticToGeocentric(p, es, a) {\r\n  var Longitude = p.x;\r\n  var Latitude = p.y;\r\n  var Height = p.z ? p.z : 0; //Z value not always supplied\r\n\r\n  var Rn; /*  Earth radius at location  */\r\n  var Sin_Lat; /*  Math.sin(Latitude)  */\r\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\r\n  var Cos_Lat; /*  Math.cos(Latitude)  */\r\n\r\n  /*\r\n   ** Don't blow up if Latitude is just a little out of the value\r\n   ** range as it may just be a rounding issue.  Also removed longitude\r\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\r\n   */\r\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\r\n    Latitude = -HALF_PI;\r\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\r\n    Latitude = HALF_PI;\r\n  } else if (Latitude < -HALF_PI) {\r\n    /* Latitude out of range */\r\n    //..reportError('geocent:lat out of range:' + Latitude);\r\n    return { x: -Infinity, y: -Infinity, z: p.z };\r\n  } else if (Latitude > HALF_PI) {\r\n    /* Latitude out of range */\r\n    return { x: Infinity, y: Infinity, z: p.z };\r\n  }\r\n\r\n  if (Longitude > Math.PI) {\r\n    Longitude -= (2 * Math.PI);\r\n  }\r\n  Sin_Lat = Math.sin(Latitude);\r\n  Cos_Lat = Math.cos(Latitude);\r\n  Sin2_Lat = Sin_Lat * Sin_Lat;\r\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\r\n  return {\r\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\r\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\r\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\r\n  };\r\n} // cs_geodetic_to_geocentric()\r\n\r\nexport function geocentricToGeodetic(p, es, a, b) {\r\n  /* local defintions and variables */\r\n  /* end-criterium of loop, accuracy of sin(Latitude) */\r\n  var genau = 1e-12;\r\n  var genau2 = (genau * genau);\r\n  var maxiter = 30;\r\n\r\n  var P; /* distance between semi-minor axis and location */\r\n  var RR; /* distance between center and location */\r\n  var CT; /* sin of geocentric latitude */\r\n  var ST; /* cos of geocentric latitude */\r\n  var RX;\r\n  var RK;\r\n  var RN; /* Earth radius at location */\r\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\r\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\r\n  var CPHI; /* cos of searched geodetic latitude */\r\n  var SPHI; /* sin of searched geodetic latitude */\r\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\r\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\r\n\r\n  var X = p.x;\r\n  var Y = p.y;\r\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\r\n  var Longitude;\r\n  var Latitude;\r\n  var Height;\r\n\r\n  P = Math.sqrt(X * X + Y * Y);\r\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\r\n\r\n  /*      special cases for latitude and longitude */\r\n  if (P / a < genau) {\r\n\r\n    /*  special case, if P=0. (X=0., Y=0.) */\r\n    Longitude = 0.0;\r\n\r\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\r\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\r\n    if (RR / a < genau) {\r\n      Latitude = HALF_PI;\r\n      Height = -b;\r\n      return {\r\n        x: p.x,\r\n        y: p.y,\r\n        z: p.z\r\n      };\r\n    }\r\n  } else {\r\n    /*  ellipsoidal (geodetic) longitude\r\n     *  interval: -PI < Longitude <= +PI */\r\n    Longitude = Math.atan2(Y, X);\r\n  }\r\n\r\n  /* --------------------------------------------------------------\r\n   * Following iterative algorithm was developped by\r\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\r\n   * Internet: www.ife.uni-hannover.de\r\n   * Iterative computation of CPHI,SPHI and Height.\r\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\r\n   * 2*10**-7 arcsec.\r\n   * --------------------------------------------------------------\r\n   */\r\n  CT = Z / RR;\r\n  ST = P / RR;\r\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\r\n  CPHI0 = ST * (1.0 - es) * RX;\r\n  SPHI0 = CT * RX;\r\n  iter = 0;\r\n\r\n  /* loop to find sin(Latitude) resp. Latitude\r\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\r\n  do {\r\n    iter++;\r\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\r\n\r\n    /*  ellipsoidal (geodetic) height */\r\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\r\n\r\n    RK = es * RN / (RN + Height);\r\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\r\n    CPHI = ST * (1.0 - RK) * RX;\r\n    SPHI = CT * RX;\r\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\r\n    CPHI0 = CPHI;\r\n    SPHI0 = SPHI;\r\n  }\r\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\r\n\r\n  /*      ellipsoidal (geodetic) latitude */\r\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\r\n  return {\r\n    x: Longitude,\r\n    y: Latitude,\r\n    z: Height\r\n  };\r\n} // cs_geocentric_to_geodetic()\r\n\r\n/****************************************************************/\r\n// pj_geocentic_to_wgs84( p )\r\n//  p = point to transform in geocentric coordinates (x,y,z)\r\n\r\n\r\n/** point object, nothing fancy, just allows values to be\r\n    passed back and forth by reference rather than by value.\r\n    Other point classes may be used as long as they have\r\n    x and y properties, which will get modified in the transform method.\r\n*/\r\nexport function geocentricToWgs84(p, datum_type, datum_params) {\r\n\r\n  if (datum_type === PJD_3PARAM) {\r\n    // if( x[io] === HUGE_VAL )\r\n    //    continue;\r\n    return {\r\n      x: p.x + datum_params[0],\r\n      y: p.y + datum_params[1],\r\n      z: p.z + datum_params[2],\r\n    };\r\n  } else if (datum_type === PJD_7PARAM) {\r\n    var Dx_BF = datum_params[0];\r\n    var Dy_BF = datum_params[1];\r\n    var Dz_BF = datum_params[2];\r\n    var Rx_BF = datum_params[3];\r\n    var Ry_BF = datum_params[4];\r\n    var Rz_BF = datum_params[5];\r\n    var M_BF = datum_params[6];\r\n    // if( x[io] === HUGE_VAL )\r\n    //    continue;\r\n    return {\r\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\r\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\r\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\r\n    };\r\n  }\r\n} // cs_geocentric_to_wgs84\r\n\r\n/****************************************************************/\r\n// pj_geocentic_from_wgs84()\r\n//  coordinate system definition,\r\n//  point to transform in geocentric coordinates (x,y,z)\r\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\r\n\r\n  if (datum_type === PJD_3PARAM) {\r\n    //if( x[io] === HUGE_VAL )\r\n    //    continue;\r\n    return {\r\n      x: p.x - datum_params[0],\r\n      y: p.y - datum_params[1],\r\n      z: p.z - datum_params[2],\r\n    };\r\n\r\n  } else if (datum_type === PJD_7PARAM) {\r\n    var Dx_BF = datum_params[0];\r\n    var Dy_BF = datum_params[1];\r\n    var Dz_BF = datum_params[2];\r\n    var Rx_BF = datum_params[3];\r\n    var Ry_BF = datum_params[4];\r\n    var Rz_BF = datum_params[5];\r\n    var M_BF = datum_params[6];\r\n    var x_tmp = (p.x - Dx_BF) / M_BF;\r\n    var y_tmp = (p.y - Dy_BF) / M_BF;\r\n    var z_tmp = (p.z - Dz_BF) / M_BF;\r\n    //if( x[io] === HUGE_VAL )\r\n    //    continue;\r\n\r\n    return {\r\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\r\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\r\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\r\n    };\r\n  } //cs_geocentric_from_wgs84()\r\n}\r\n", "import {\r\n  PJD_3PARAM,\r\n  PJD_7PARAM,\r\n  PJD_GRIDSHIFT,\r\n  PJD_NODATUM,\r\n  R2D,\r\n  SRS_WGS84_ESQUARED,\r\n  SRS_WGS84_SEMIMAJOR, SRS_WGS84_SEMIMINOR\r\n} from './constants/values';\r\n\r\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\r\nimport adjust_lon from \"./common/adjust_lon\";\r\nfunction checkParams(type) {\r\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\r\n}\r\n\r\nexport default function(source, dest, point) {\r\n  // Short cut if the datums are identical.\r\n  if (compareDatums(source, dest)) {\r\n    return point; // in this case, zero is sucess,\r\n    // whereas cs_compare_datums returns 1 to indicate TRUE\r\n    // confusing, should fix this\r\n  }\r\n\r\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\r\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\r\n    return point;\r\n  }\r\n\r\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\r\n  var source_a = source.a;\r\n  var source_es = source.es;\r\n  if (source.datum_type === PJD_GRIDSHIFT) {\r\n    var gridShiftCode = applyGridShift(source, false, point);\r\n    if (gridShiftCode !== 0) {\r\n      return undefined;\r\n    }\r\n    source_a = SRS_WGS84_SEMIMAJOR;\r\n    source_es = SRS_WGS84_ESQUARED;\r\n  }\r\n\r\n  var dest_a = dest.a;\r\n  var dest_b = dest.b;\r\n  var dest_es = dest.es;\r\n  if (dest.datum_type === PJD_GRIDSHIFT) {\r\n    dest_a = SRS_WGS84_SEMIMAJOR;\r\n    dest_b = SRS_WGS84_SEMIMINOR;\r\n    dest_es = SRS_WGS84_ESQUARED;\r\n  }\r\n\r\n  // Do we need to go through geocentric coordinates?\r\n  if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\r\n    return point;\r\n  }\r\n\r\n  // Convert to geocentric coordinates.\r\n  point = geodeticToGeocentric(point, source_es, source_a);\r\n  // Convert between datums\r\n  if (checkParams(source.datum_type)) {\r\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\r\n  }\r\n  if (checkParams(dest.datum_type)) {\r\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\r\n  }\r\n  point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);\r\n\r\n  if (dest.datum_type === PJD_GRIDSHIFT) {\r\n    var destGridShiftResult = applyGridShift(dest, true, point);\r\n    if (destGridShiftResult !== 0) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  return point;\r\n}\r\n\r\nexport function applyGridShift(source, inverse, point) {\r\n  if (source.grids === null || source.grids.length === 0) {\r\n    console.log('Grid shift grids not found');\r\n    return -1;\r\n  }\r\n  var input = {x: -point.x, y: point.y};\r\n  var output = {x: Number.NaN, y: Number.NaN};\r\n  var onlyMandatoryGrids = false;\r\n  var attemptedGrids = [];\r\n  outer:\r\n  for (var i = 0; i < source.grids.length; i++) {\r\n    var grid = source.grids[i];\r\n    attemptedGrids.push(grid.name);\r\n    if (grid.isNull) {\r\n      output = input;\r\n      break;\r\n    }\r\n    onlyMandatoryGrids = grid.mandatory;\r\n    if (grid.grid === null) {\r\n      if (grid.mandatory) {\r\n        console.log(\"Unable to find mandatory grid '\" + grid.name + \"'\");\r\n        return -1;\r\n      }\r\n      continue;\r\n    }\r\n    var subgrids = grid.grid.subgrids;\r\n    for (var j = 0, jj = subgrids.length; j < jj; j++) {\r\n      var subgrid = subgrids[j];\r\n      // skip tables that don't match our point at all\r\n      var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;\r\n      var minX = subgrid.ll[0] - epsilon;\r\n      var minY = subgrid.ll[1] - epsilon;\r\n      var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;\r\n      var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;\r\n      if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {\r\n        continue;\r\n      }\r\n      output = applySubgridShift(input, inverse, subgrid);\r\n      if (!isNaN(output.x)) {\r\n        break outer;\r\n      }\r\n    }\r\n  }\r\n  if (isNaN(output.x)) {\r\n    console.log(\"Failed to find a grid shift table for location '\"+\r\n      -input.x * R2D + \" \" + input.y * R2D + \" tried: '\" + attemptedGrids + \"'\");\r\n    return -1;\r\n  }\r\n  point.x = -output.x;\r\n  point.y = output.y;\r\n  return 0;\r\n}\r\n\r\nfunction applySubgridShift(pin, inverse, ct) {\r\n  var val = {x: Number.NaN, y: Number.NaN};\r\n  if (isNaN(pin.x)) { return val; }\r\n  var tb = {x: pin.x, y: pin.y};\r\n  tb.x -= ct.ll[0];\r\n  tb.y -= ct.ll[1];\r\n  tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;\r\n  var t = nadInterpolate(tb, ct);\r\n  if (inverse) {\r\n    if (isNaN(t.x)) {\r\n      return val;\r\n    }\r\n    t.x = tb.x - t.x;\r\n    t.y = tb.y - t.y;\r\n    var i = 9, tol = 1e-12;\r\n    var dif, del;\r\n    do {\r\n      del = nadInterpolate(t, ct);\r\n      if (isNaN(del.x)) {\r\n        console.log(\"Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.\");\r\n        break;\r\n      }\r\n      dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};\r\n      t.x += dif.x;\r\n      t.y += dif.y;\r\n    } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);\r\n    if (i < 0) {\r\n      console.log(\"Inverse grid shift iterator failed to converge.\");\r\n      return val;\r\n    }\r\n    val.x = adjust_lon(t.x + ct.ll[0]);\r\n    val.y = t.y + ct.ll[1];\r\n  } else {\r\n    if (!isNaN(t.x)) {\r\n      val.x = pin.x + t.x;\r\n      val.y = pin.y + t.y;\r\n    }\r\n  }\r\n  return val;\r\n}\r\n\r\nfunction nadInterpolate(pin, ct) {\r\n  var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};\r\n  var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};\r\n  var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};\r\n  var val= {x: Number.NaN, y: Number.NaN};\r\n  var inx;\r\n  if (indx.x < 0 || indx.x >= ct.lim[0]) {\r\n    return val;\r\n  }\r\n  if (indx.y < 0 || indx.y >= ct.lim[1]) {\r\n    return val;\r\n  }\r\n  inx = (indx.y * ct.lim[0]) + indx.x;\r\n  var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\r\n  inx++;\r\n  var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\r\n  inx += ct.lim[0];\r\n  var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\r\n  inx--;\r\n  var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\r\n  var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),\r\n    m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;\r\n  val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);\r\n  val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);\r\n  return val;\r\n}\r\n", "export default function(crs, denorm, point) {\r\n  var xin = point.x,\r\n    yin = point.y,\r\n    zin = point.z || 0.0;\r\n  var v, t, i;\r\n  var out = {};\r\n  for (i = 0; i < 3; i++) {\r\n    if (denorm && i === 2 && point.z === undefined) {\r\n      continue;\r\n    }\r\n    if (i === 0) {\r\n      v = xin;\r\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\r\n        t = 'x';\r\n      } else {\r\n        t = 'y';\r\n      }\r\n\r\n    }\r\n    else if (i === 1) {\r\n      v = yin;\r\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\r\n        t = 'y';\r\n      } else {\r\n        t = 'x';\r\n      }\r\n    }\r\n    else {\r\n      v = zin;\r\n      t = 'z';\r\n    }\r\n    switch (crs.axis[i]) {\r\n    case 'e':\r\n      out[t] = v;\r\n      break;\r\n    case 'w':\r\n      out[t] = -v;\r\n      break;\r\n    case 'n':\r\n      out[t] = v;\r\n      break;\r\n    case 's':\r\n      out[t] = -v;\r\n      break;\r\n    case 'u':\r\n      if (point[t] !== undefined) {\r\n        out.z = v;\r\n      }\r\n      break;\r\n    case 'd':\r\n      if (point[t] !== undefined) {\r\n        out.z = -v;\r\n      }\r\n      break;\r\n    default:\r\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\r\n      return null;\r\n    }\r\n  }\r\n  return out;\r\n}\r\n", "export default function (array){\r\n  var out = {\r\n    x: array[0],\r\n    y: array[1]\r\n  };\r\n  if (array.length>2) {\r\n    out.z = array[2];\r\n  }\r\n  if (array.length>3) {\r\n    out.m = array[3];\r\n  }\r\n  return out;\r\n}", "export default function (point) {\r\n  checkCoord(point.x);\r\n  checkCoord(point.y);\r\n}\r\nfunction checkCoord(num) {\r\n  if (typeof Number.isFinite === 'function') {\r\n    if (Number.isFinite(num)) {\r\n      return;\r\n    }\r\n    throw new TypeError('coordinates must be finite numbers');\r\n  }\r\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\r\n    throw new TypeError('coordinates must be finite numbers');\r\n  }\r\n}\r\n", "import {D2R, R2D, PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT} from './constants/values';\r\nimport datum_transform from './datum_transform';\r\nimport adjust_axis from './adjust_axis';\r\nimport proj from './Proj';\r\nimport toPoint from './common/toPoint';\r\nimport checkSanity from './checkSanity';\r\n\r\nfunction checkNotWGS(source, dest) {\r\n  return (\r\n    (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM || source.datum.datum_type === PJD_GRIDSHIFT) && dest.datumCode !== 'WGS84') ||\r\n    ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM || dest.datum.datum_type === PJD_GRIDSHIFT) && source.datumCode !== 'WGS84');\r\n}\r\n\r\nexport default function transform(source, dest, point, enforceAxis) {\r\n  var wgs84;\r\n  if (Array.isArray(point)) {\r\n    point = toPoint(point);\r\n  } else {\r\n    // Clone the point object so inputs don't get modified\r\n    point = {\r\n      x: point.x,\r\n      y: point.y,\r\n      z: point.z,\r\n      m: point.m\r\n    };\r\n  }\r\n  var hasZ = point.z !== undefined;\r\n  checkSanity(point);\r\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\r\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\r\n    wgs84 = new proj('WGS84');\r\n    point = transform(source, wgs84, point, enforceAxis);\r\n    source = wgs84;\r\n  }\r\n  // DGR, 2010/11/12\r\n  if (enforceAxis && source.axis !== 'enu') {\r\n    point = adjust_axis(source, false, point);\r\n  }\r\n  // Transform source points to long/lat, if they aren't already.\r\n  if (source.projName === 'longlat') {\r\n    point = {\r\n      x: point.x * D2R,\r\n      y: point.y * D2R,\r\n      z: point.z || 0\r\n    };\r\n  } else {\r\n    if (source.to_meter) {\r\n      point = {\r\n        x: point.x * source.to_meter,\r\n        y: point.y * source.to_meter,\r\n        z: point.z || 0\r\n      };\r\n    }\r\n    point = source.inverse(point); // Convert Cartesian to longlat\r\n    if (!point) {\r\n      return;\r\n    }\r\n  }\r\n  // Adjust for the prime meridian if necessary\r\n  if (source.from_greenwich) {\r\n    point.x += source.from_greenwich;\r\n  }\r\n\r\n  // Convert datums if needed, and if possible.\r\n  point = datum_transform(source.datum, dest.datum, point);\r\n  if (!point) {\r\n    return;\r\n  }\r\n\r\n  // Adjust for the prime meridian if necessary\r\n  if (dest.from_greenwich) {\r\n    point = {\r\n      x: point.x - dest.from_greenwich,\r\n      y: point.y,\r\n      z: point.z || 0\r\n    };\r\n  }\r\n\r\n  if (dest.projName === 'longlat') {\r\n    // convert radians to decimal degrees\r\n    point = {\r\n      x: point.x * R2D,\r\n      y: point.y * R2D,\r\n      z: point.z || 0\r\n    };\r\n  } else { // else project\r\n    point = dest.forward(point);\r\n    if (dest.to_meter) {\r\n      point = {\r\n        x: point.x / dest.to_meter,\r\n        y: point.y / dest.to_meter,\r\n        z: point.z || 0\r\n      };\r\n    }\r\n  }\r\n\r\n  // DGR, 2010/11/12\r\n  if (enforceAxis && dest.axis !== 'enu') {\r\n    return adjust_axis(dest, true, point);\r\n  }\r\n\r\n  if (point && !hasZ) {\r\n    delete point.z;\r\n  }\r\n  return point;\r\n}\r\n", "import proj from './Proj';\r\nimport transform from './transform';\r\nvar wgs84 = proj('WGS84');\r\n\r\nfunction transformer(from, to, coords, enforceAxis) {\r\n  var transformedArray, out, keys;\r\n  if (Array.isArray(coords)) {\r\n    transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};\r\n    if (coords.length > 2) {\r\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\r\n        if (typeof transformedArray.z === 'number') {\r\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.slice(3));\r\n        } else {\r\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.slice(3));\r\n        }\r\n      } else {\r\n        return [transformedArray.x, transformedArray.y].concat(coords.slice(2));\r\n      }\r\n    } else {\r\n      return [transformedArray.x, transformedArray.y];\r\n    }\r\n  } else {\r\n    out = transform(from, to, coords, enforceAxis);\r\n    keys = Object.keys(coords);\r\n    if (keys.length === 2) {\r\n      return out;\r\n    }\r\n    keys.forEach(function (key) {\r\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\r\n        if (key === 'x' || key === 'y' || key === 'z') {\r\n          return;\r\n        }\r\n      } else {\r\n        if (key === 'x' || key === 'y') {\r\n          return;\r\n        }\r\n      }\r\n      out[key] = coords[key];\r\n    });\r\n    return out;\r\n  }\r\n}\r\n\r\nfunction checkProj(item) {\r\n  if (item instanceof proj) {\r\n    return item;\r\n  }\r\n  if (item.oProj) {\r\n    return item.oProj;\r\n  }\r\n  return proj(item);\r\n}\r\n\r\nfunction proj4(fromProj, toProj, coord) {\r\n  fromProj = checkProj(fromProj);\r\n  var single = false;\r\n  var obj;\r\n  if (typeof toProj === 'undefined') {\r\n    toProj = fromProj;\r\n    fromProj = wgs84;\r\n    single = true;\r\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\r\n    coord = toProj;\r\n    toProj = fromProj;\r\n    fromProj = wgs84;\r\n    single = true;\r\n  }\r\n  toProj = checkProj(toProj);\r\n  if (coord) {\r\n    return transformer(fromProj, toProj, coord);\r\n  } else {\r\n    obj = {\r\n      forward: function (coords, enforceAxis) {\r\n        return transformer(fromProj, toProj, coords, enforceAxis);\r\n      },\r\n      inverse: function (coords, enforceAxis) {\r\n        return transformer(toProj, fromProj, coords, enforceAxis);\r\n      }\r\n    };\r\n    if (single) {\r\n      obj.oProj = toProj;\r\n    }\r\n    return obj;\r\n  }\r\n}\r\nexport default proj4;", "\r\n\r\n\r\n/**\r\n * UTM zones are grouped, and assigned to one of a group of 6\r\n * sets.\r\n *\r\n * {int} @private\r\n */\r\nvar NUM_100K_SETS = 6;\r\n\r\n/**\r\n * The column letters (for easting) of the lower left value, per\r\n * set.\r\n *\r\n * {string} @private\r\n */\r\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\r\n\r\n/**\r\n * The row letters (for northing) of the lower left value, per\r\n * set.\r\n *\r\n * {string} @private\r\n */\r\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\r\n\r\nvar A = 65; // A\r\nvar I = 73; // I\r\nvar O = 79; // O\r\nvar V = 86; // V\r\nvar Z = 90; // Z\r\nexport default {\r\n  forward: forward,\r\n  inverse: inverse,\r\n  toPoint: toPoint\r\n};\r\n/**\r\n * Conversion of lat/lon to MGRS.\r\n *\r\n * @param {object} ll Object literal with lat and lon properties on a\r\n *     WGS84 ellipsoid.\r\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\r\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\r\n * @return {string} the MGRS string for the given location and accuracy.\r\n */\r\nexport function forward(ll, accuracy) {\r\n  accuracy = accuracy || 5; // default accuracy 1m\r\n  return encode(LLtoUTM({\r\n    lat: ll[1],\r\n    lon: ll[0]\r\n  }), accuracy);\r\n};\r\n\r\n/**\r\n * Conversion of MGRS to lat/lon.\r\n *\r\n * @param {string} mgrs MGRS string.\r\n * @return {array} An array with left (longitude), bottom (latitude), right\r\n *     (longitude) and top (latitude) values in WGS84, representing the\r\n *     bounding box for the provided MGRS reference.\r\n */\r\nexport function inverse(mgrs) {\r\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\r\n  if (bbox.lat && bbox.lon) {\r\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\r\n  }\r\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\r\n};\r\n\r\nexport function toPoint(mgrs) {\r\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\r\n  if (bbox.lat && bbox.lon) {\r\n    return [bbox.lon, bbox.lat];\r\n  }\r\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\r\n};\r\n/**\r\n * Conversion from degrees to radians.\r\n *\r\n * @private\r\n * @param {number} deg the angle in degrees.\r\n * @return {number} the angle in radians.\r\n */\r\nfunction degToRad(deg) {\r\n  return (deg * (Math.PI / 180.0));\r\n}\r\n\r\n/**\r\n * Conversion from radians to degrees.\r\n *\r\n * @private\r\n * @param {number} rad the angle in radians.\r\n * @return {number} the angle in degrees.\r\n */\r\nfunction radToDeg(rad) {\r\n  return (180.0 * (rad / Math.PI));\r\n}\r\n\r\n/**\r\n * Converts a set of Longitude and Latitude co-ordinates to UTM\r\n * using the WGS84 ellipsoid.\r\n *\r\n * @private\r\n * @param {object} ll Object literal with lat and lon properties\r\n *     representing the WGS84 coordinate to be converted.\r\n * @return {object} Object literal containing the UTM value with easting,\r\n *     northing, zoneNumber and zoneLetter properties, and an optional\r\n *     accuracy property in digits. Returns null if the conversion failed.\r\n */\r\nfunction LLtoUTM(ll) {\r\n  var Lat = ll.lat;\r\n  var Long = ll.lon;\r\n  var a = 6378137.0; //ellip.radius;\r\n  var eccSquared = 0.00669438; //ellip.eccsq;\r\n  var k0 = 0.9996;\r\n  var LongOrigin;\r\n  var eccPrimeSquared;\r\n  var N, T, C, A, M;\r\n  var LatRad = degToRad(Lat);\r\n  var LongRad = degToRad(Long);\r\n  var LongOriginRad;\r\n  var ZoneNumber;\r\n  // (int)\r\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\r\n\r\n  //Make sure the longitude 180.00 is in Zone 60\r\n  if (Long === 180) {\r\n    ZoneNumber = 60;\r\n  }\r\n\r\n  // Special zone for Norway\r\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\r\n    ZoneNumber = 32;\r\n  }\r\n\r\n  // Special zones for Svalbard\r\n  if (Lat >= 72.0 && Lat < 84.0) {\r\n    if (Long >= 0.0 && Long < 9.0) {\r\n      ZoneNumber = 31;\r\n    }\r\n    else if (Long >= 9.0 && Long < 21.0) {\r\n      ZoneNumber = 33;\r\n    }\r\n    else if (Long >= 21.0 && Long < 33.0) {\r\n      ZoneNumber = 35;\r\n    }\r\n    else if (Long >= 33.0 && Long < 42.0) {\r\n      ZoneNumber = 37;\r\n    }\r\n  }\r\n\r\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\r\n  // in middle of\r\n  // zone\r\n  LongOriginRad = degToRad(LongOrigin);\r\n\r\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\r\n\r\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\r\n  T = Math.tan(LatRad) * Math.tan(LatRad);\r\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\r\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\r\n\r\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\r\n\r\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\r\n\r\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\r\n  if (Lat < 0.0) {\r\n    UTMNorthing += 10000000.0; //10000000 meter offset for\r\n    // southern hemisphere\r\n  }\r\n\r\n  return {\r\n    northing: Math.round(UTMNorthing),\r\n    easting: Math.round(UTMEasting),\r\n    zoneNumber: ZoneNumber,\r\n    zoneLetter: getLetterDesignator(Lat)\r\n  };\r\n}\r\n\r\n/**\r\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\r\n * class where the Zone can be specified as a single string eg.\"60N\" which\r\n * is then broken down into the ZoneNumber and ZoneLetter.\r\n *\r\n * @private\r\n * @param {object} utm An object literal with northing, easting, zoneNumber\r\n *     and zoneLetter properties. If an optional accuracy property is\r\n *     provided (in meters), a bounding box will be returned instead of\r\n *     latitude and longitude.\r\n * @return {object} An object literal containing either lat and lon values\r\n *     (if no accuracy was provided), or top, right, bottom and left values\r\n *     for the bounding box calculated according to the provided accuracy.\r\n *     Returns null if the conversion failed.\r\n */\r\nfunction UTMtoLL(utm) {\r\n\r\n  var UTMNorthing = utm.northing;\r\n  var UTMEasting = utm.easting;\r\n  var zoneLetter = utm.zoneLetter;\r\n  var zoneNumber = utm.zoneNumber;\r\n  // check the ZoneNummber is valid\r\n  if (zoneNumber < 0 || zoneNumber > 60) {\r\n    return null;\r\n  }\r\n\r\n  var k0 = 0.9996;\r\n  var a = 6378137.0; //ellip.radius;\r\n  var eccSquared = 0.00669438; //ellip.eccsq;\r\n  var eccPrimeSquared;\r\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\r\n  var N1, T1, C1, R1, D, M;\r\n  var LongOrigin;\r\n  var mu, phi1Rad;\r\n\r\n  // remove 500,000 meter offset for longitude\r\n  var x = UTMEasting - 500000.0;\r\n  var y = UTMNorthing;\r\n\r\n  // We must know somehow if we are in the Northern or Southern\r\n  // hemisphere, this is the only time we use the letter So even\r\n  // if the Zone letter isn't exactly correct it should indicate\r\n  // the hemisphere correctly\r\n  if (zoneLetter < 'N') {\r\n    y -= 10000000.0; // remove 10,000,000 meter offset used\r\n    // for southern hemisphere\r\n  }\r\n\r\n  // There are 60 zones with zone 1 being at West -180 to -174\r\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\r\n  // in middle of\r\n  // zone\r\n\r\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\r\n\r\n  M = y / k0;\r\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\r\n\r\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\r\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\r\n\r\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\r\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\r\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\r\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\r\n  D = x / (N1 * k0);\r\n\r\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\r\n  lat = radToDeg(lat);\r\n\r\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\r\n  lon = LongOrigin + radToDeg(lon);\r\n\r\n  var result;\r\n  if (utm.accuracy) {\r\n    var topRight = UTMtoLL({\r\n      northing: utm.northing + utm.accuracy,\r\n      easting: utm.easting + utm.accuracy,\r\n      zoneLetter: utm.zoneLetter,\r\n      zoneNumber: utm.zoneNumber\r\n    });\r\n    result = {\r\n      top: topRight.lat,\r\n      right: topRight.lon,\r\n      bottom: lat,\r\n      left: lon\r\n    };\r\n  }\r\n  else {\r\n    result = {\r\n      lat: lat,\r\n      lon: lon\r\n    };\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Calculates the MGRS letter designator for the given latitude.\r\n *\r\n * @private\r\n * @param {number} lat The latitude in WGS84 to get the letter designator\r\n *     for.\r\n * @return {char} The letter designator.\r\n */\r\nfunction getLetterDesignator(lat) {\r\n  //This is here as an error flag to show that the Latitude is\r\n  //outside MGRS limits\r\n  var LetterDesignator = 'Z';\r\n\r\n  if ((84 >= lat) && (lat >= 72)) {\r\n    LetterDesignator = 'X';\r\n  }\r\n  else if ((72 > lat) && (lat >= 64)) {\r\n    LetterDesignator = 'W';\r\n  }\r\n  else if ((64 > lat) && (lat >= 56)) {\r\n    LetterDesignator = 'V';\r\n  }\r\n  else if ((56 > lat) && (lat >= 48)) {\r\n    LetterDesignator = 'U';\r\n  }\r\n  else if ((48 > lat) && (lat >= 40)) {\r\n    LetterDesignator = 'T';\r\n  }\r\n  else if ((40 > lat) && (lat >= 32)) {\r\n    LetterDesignator = 'S';\r\n  }\r\n  else if ((32 > lat) && (lat >= 24)) {\r\n    LetterDesignator = 'R';\r\n  }\r\n  else if ((24 > lat) && (lat >= 16)) {\r\n    LetterDesignator = 'Q';\r\n  }\r\n  else if ((16 > lat) && (lat >= 8)) {\r\n    LetterDesignator = 'P';\r\n  }\r\n  else if ((8 > lat) && (lat >= 0)) {\r\n    LetterDesignator = 'N';\r\n  }\r\n  else if ((0 > lat) && (lat >= -8)) {\r\n    LetterDesignator = 'M';\r\n  }\r\n  else if ((-8 > lat) && (lat >= -16)) {\r\n    LetterDesignator = 'L';\r\n  }\r\n  else if ((-16 > lat) && (lat >= -24)) {\r\n    LetterDesignator = 'K';\r\n  }\r\n  else if ((-24 > lat) && (lat >= -32)) {\r\n    LetterDesignator = 'J';\r\n  }\r\n  else if ((-32 > lat) && (lat >= -40)) {\r\n    LetterDesignator = 'H';\r\n  }\r\n  else if ((-40 > lat) && (lat >= -48)) {\r\n    LetterDesignator = 'G';\r\n  }\r\n  else if ((-48 > lat) && (lat >= -56)) {\r\n    LetterDesignator = 'F';\r\n  }\r\n  else if ((-56 > lat) && (lat >= -64)) {\r\n    LetterDesignator = 'E';\r\n  }\r\n  else if ((-64 > lat) && (lat >= -72)) {\r\n    LetterDesignator = 'D';\r\n  }\r\n  else if ((-72 > lat) && (lat >= -80)) {\r\n    LetterDesignator = 'C';\r\n  }\r\n  return LetterDesignator;\r\n}\r\n\r\n/**\r\n * Encodes a UTM location as MGRS string.\r\n *\r\n * @private\r\n * @param {object} utm An object literal with easting, northing,\r\n *     zoneLetter, zoneNumber\r\n * @param {number} accuracy Accuracy in digits (1-5).\r\n * @return {string} MGRS string for the given UTM location.\r\n */\r\nfunction encode(utm, accuracy) {\r\n  // prepend with leading zeroes\r\n  var seasting = \"00000\" + utm.easting,\r\n    snorthing = \"00000\" + utm.northing;\r\n\r\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\r\n}\r\n\r\n/**\r\n * Get the two letter 100k designator for a given UTM easting,\r\n * northing and zone number value.\r\n *\r\n * @private\r\n * @param {number} easting\r\n * @param {number} northing\r\n * @param {number} zoneNumber\r\n * @return the two letter 100k designator for the given UTM location.\r\n */\r\nfunction get100kID(easting, northing, zoneNumber) {\r\n  var setParm = get100kSetForZone(zoneNumber);\r\n  var setColumn = Math.floor(easting / 100000);\r\n  var setRow = Math.floor(northing / 100000) % 20;\r\n  return getLetter100kID(setColumn, setRow, setParm);\r\n}\r\n\r\n/**\r\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\r\n *\r\n * @private\r\n * @param {number} i An UTM zone number.\r\n * @return {number} the 100k set the UTM zone is in.\r\n */\r\nfunction get100kSetForZone(i) {\r\n  var setParm = i % NUM_100K_SETS;\r\n  if (setParm === 0) {\r\n    setParm = NUM_100K_SETS;\r\n  }\r\n\r\n  return setParm;\r\n}\r\n\r\n/**\r\n * Get the two-letter MGRS 100k designator given information\r\n * translated from the UTM northing, easting and zone number.\r\n *\r\n * @private\r\n * @param {number} column the column index as it relates to the MGRS\r\n *        100k set spreadsheet, created from the UTM easting.\r\n *        Values are 1-8.\r\n * @param {number} row the row index as it relates to the MGRS 100k set\r\n *        spreadsheet, created from the UTM northing value. Values\r\n *        are from 0-19.\r\n * @param {number} parm the set block, as it relates to the MGRS 100k set\r\n *        spreadsheet, created from the UTM zone. Values are from\r\n *        1-60.\r\n * @return two letter MGRS 100k code.\r\n */\r\nfunction getLetter100kID(column, row, parm) {\r\n  // colOrigin and rowOrigin are the letters at the origin of the set\r\n  var index = parm - 1;\r\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\r\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\r\n\r\n  // colInt and rowInt are the letters to build to return\r\n  var colInt = colOrigin + column - 1;\r\n  var rowInt = rowOrigin + row;\r\n  var rollover = false;\r\n\r\n  if (colInt > Z) {\r\n    colInt = colInt - Z + A - 1;\r\n    rollover = true;\r\n  }\r\n\r\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\r\n    colInt++;\r\n  }\r\n\r\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\r\n    colInt++;\r\n\r\n    if (colInt === I) {\r\n      colInt++;\r\n    }\r\n  }\r\n\r\n  if (colInt > Z) {\r\n    colInt = colInt - Z + A - 1;\r\n  }\r\n\r\n  if (rowInt > V) {\r\n    rowInt = rowInt - V + A - 1;\r\n    rollover = true;\r\n  }\r\n  else {\r\n    rollover = false;\r\n  }\r\n\r\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\r\n    rowInt++;\r\n  }\r\n\r\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\r\n    rowInt++;\r\n\r\n    if (rowInt === I) {\r\n      rowInt++;\r\n    }\r\n  }\r\n\r\n  if (rowInt > V) {\r\n    rowInt = rowInt - V + A - 1;\r\n  }\r\n\r\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\r\n  return twoLetter;\r\n}\r\n\r\n/**\r\n * Decode the UTM parameters from a MGRS string.\r\n *\r\n * @private\r\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\r\n * @return {object} An object literal with easting, northing, zoneLetter,\r\n *     zoneNumber and accuracy (in meters) properties.\r\n */\r\nfunction decode(mgrsString) {\r\n\r\n  if (mgrsString && mgrsString.length === 0) {\r\n    throw (\"MGRSPoint coverting from nothing\");\r\n  }\r\n\r\n  var length = mgrsString.length;\r\n\r\n  var hunK = null;\r\n  var sb = \"\";\r\n  var testChar;\r\n  var i = 0;\r\n\r\n  // get Zone number\r\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\r\n    if (i >= 2) {\r\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\r\n    }\r\n    sb += testChar;\r\n    i++;\r\n  }\r\n\r\n  var zoneNumber = parseInt(sb, 10);\r\n\r\n  if (i === 0 || i + 3 > length) {\r\n    // A good MGRS string has to be 4-5 digits long,\r\n    // ##AAA/#AAA at least.\r\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\r\n  }\r\n\r\n  var zoneLetter = mgrsString.charAt(i++);\r\n\r\n  // Should we check the zone letter here? Why not.\r\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\r\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\r\n  }\r\n\r\n  hunK = mgrsString.substring(i, i += 2);\r\n\r\n  var set = get100kSetForZone(zoneNumber);\r\n\r\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\r\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\r\n\r\n  // We have a bug where the northing may be 2000000 too low.\r\n  // How\r\n  // do we know when to roll over?\r\n\r\n  while (north100k < getMinNorthing(zoneLetter)) {\r\n    north100k += 2000000;\r\n  }\r\n\r\n  // calculate the char index for easting/northing separator\r\n  var remainder = length - i;\r\n\r\n  if (remainder % 2 !== 0) {\r\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\r\n  }\r\n\r\n  var sep = remainder / 2;\r\n\r\n  var sepEasting = 0.0;\r\n  var sepNorthing = 0.0;\r\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\r\n  if (sep > 0) {\r\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\r\n    sepEastingString = mgrsString.substring(i, i + sep);\r\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\r\n    sepNorthingString = mgrsString.substring(i + sep);\r\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\r\n  }\r\n\r\n  easting = sepEasting + east100k;\r\n  northing = sepNorthing + north100k;\r\n\r\n  return {\r\n    easting: easting,\r\n    northing: northing,\r\n    zoneLetter: zoneLetter,\r\n    zoneNumber: zoneNumber,\r\n    accuracy: accuracyBonus\r\n  };\r\n}\r\n\r\n/**\r\n * Given the first letter from a two-letter MGRS 100k zone, and given the\r\n * MGRS table set for the zone number, figure out the easting value that\r\n * should be added to the other, secondary easting value.\r\n *\r\n * @private\r\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\r\n * @param {number} set The MGRS table set for the zone number.\r\n * @return {number} The easting value for the given letter and set.\r\n */\r\nfunction getEastingFromChar(e, set) {\r\n  // colOrigin is the letter at the origin of the set for the\r\n  // column\r\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\r\n  var eastingValue = 100000.0;\r\n  var rewindMarker = false;\r\n\r\n  while (curCol !== e.charCodeAt(0)) {\r\n    curCol++;\r\n    if (curCol === I) {\r\n      curCol++;\r\n    }\r\n    if (curCol === O) {\r\n      curCol++;\r\n    }\r\n    if (curCol > Z) {\r\n      if (rewindMarker) {\r\n        throw (\"Bad character: \" + e);\r\n      }\r\n      curCol = A;\r\n      rewindMarker = true;\r\n    }\r\n    eastingValue += 100000.0;\r\n  }\r\n\r\n  return eastingValue;\r\n}\r\n\r\n/**\r\n * Given the second letter from a two-letter MGRS 100k zone, and given the\r\n * MGRS table set for the zone number, figure out the northing value that\r\n * should be added to the other, secondary northing value. You have to\r\n * remember that Northings are determined from the equator, and the vertical\r\n * cycle of letters mean a 2000000 additional northing meters. This happens\r\n * approx. every 18 degrees of latitude. This method does *NOT* count any\r\n * additional northings. You have to figure out how many 2000000 meters need\r\n * to be added for the zone letter of the MGRS coordinate.\r\n *\r\n * @private\r\n * @param {char} n Second letter of the MGRS 100k zone\r\n * @param {number} set The MGRS table set number, which is dependent on the\r\n *     UTM zone number.\r\n * @return {number} The northing value for the given letter and set.\r\n */\r\nfunction getNorthingFromChar(n, set) {\r\n\r\n  if (n > 'V') {\r\n    throw (\"MGRSPoint given invalid Northing \" + n);\r\n  }\r\n\r\n  // rowOrigin is the letter at the origin of the set for the\r\n  // column\r\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\r\n  var northingValue = 0.0;\r\n  var rewindMarker = false;\r\n\r\n  while (curRow !== n.charCodeAt(0)) {\r\n    curRow++;\r\n    if (curRow === I) {\r\n      curRow++;\r\n    }\r\n    if (curRow === O) {\r\n      curRow++;\r\n    }\r\n    // fixing a bug making whole application hang in this loop\r\n    // when 'n' is a wrong character\r\n    if (curRow > V) {\r\n      if (rewindMarker) { // making sure that this loop ends\r\n        throw (\"Bad character: \" + n);\r\n      }\r\n      curRow = A;\r\n      rewindMarker = true;\r\n    }\r\n    northingValue += 100000.0;\r\n  }\r\n\r\n  return northingValue;\r\n}\r\n\r\n/**\r\n * The function getMinNorthing returns the minimum northing value of a MGRS\r\n * zone.\r\n *\r\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\r\n *\r\n * @private\r\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\r\n * @return {number}\r\n */\r\nfunction getMinNorthing(zoneLetter) {\r\n  var northing;\r\n  switch (zoneLetter) {\r\n  case 'C':\r\n    northing = 1100000.0;\r\n    break;\r\n  case 'D':\r\n    northing = 2000000.0;\r\n    break;\r\n  case 'E':\r\n    northing = 2800000.0;\r\n    break;\r\n  case 'F':\r\n    northing = 3700000.0;\r\n    break;\r\n  case 'G':\r\n    northing = 4600000.0;\r\n    break;\r\n  case 'H':\r\n    northing = 5500000.0;\r\n    break;\r\n  case 'J':\r\n    northing = 6400000.0;\r\n    break;\r\n  case 'K':\r\n    northing = 7300000.0;\r\n    break;\r\n  case 'L':\r\n    northing = 8200000.0;\r\n    break;\r\n  case 'M':\r\n    northing = 9100000.0;\r\n    break;\r\n  case 'N':\r\n    northing = 0.0;\r\n    break;\r\n  case 'P':\r\n    northing = 800000.0;\r\n    break;\r\n  case 'Q':\r\n    northing = 1700000.0;\r\n    break;\r\n  case 'R':\r\n    northing = 2600000.0;\r\n    break;\r\n  case 'S':\r\n    northing = 3500000.0;\r\n    break;\r\n  case 'T':\r\n    northing = 4400000.0;\r\n    break;\r\n  case 'U':\r\n    northing = 5300000.0;\r\n    break;\r\n  case 'V':\r\n    northing = 6200000.0;\r\n    break;\r\n  case 'W':\r\n    northing = 7000000.0;\r\n    break;\r\n  case 'X':\r\n    northing = 7900000.0;\r\n    break;\r\n  default:\r\n    northing = -1.0;\r\n  }\r\n  if (northing >= 0.0) {\r\n    return northing;\r\n  }\r\n  else {\r\n    throw (\"Invalid zone letter: \" + zoneLetter);\r\n  }\r\n\r\n}\r\n", "import {toPoint, forward} from 'mgrs';\r\n\r\nfunction Point(x, y, z) {\r\n  if (!(this instanceof Point)) {\r\n    return new Point(x, y, z);\r\n  }\r\n  if (Array.isArray(x)) {\r\n    this.x = x[0];\r\n    this.y = x[1];\r\n    this.z = x[2] || 0.0;\r\n  } else if(typeof x === 'object') {\r\n    this.x = x.x;\r\n    this.y = x.y;\r\n    this.z = x.z || 0.0;\r\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\r\n    var coords = x.split(',');\r\n    this.x = parseFloat(coords[0], 10);\r\n    this.y = parseFloat(coords[1], 10);\r\n    this.z = parseFloat(coords[2], 10) || 0.0;\r\n  } else {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z || 0.0;\r\n  }\r\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\r\n}\r\n\r\nPoint.fromMGRS = function(mgrsStr) {\r\n  return new Point(toPoint(mgrsStr));\r\n};\r\nPoint.prototype.toMGRS = function(accuracy) {\r\n  return forward([this.x, this.y], accuracy);\r\n};\r\nexport default Point;\r\n", "var C00 = 1;\r\nvar C02 = 0.25;\r\nvar C04 = 0.046875;\r\nvar C06 = 0.01953125;\r\nvar C08 = 0.01068115234375;\r\nvar C22 = 0.75;\r\nvar C44 = 0.46875;\r\nvar C46 = 0.01302083333333333333;\r\nvar C48 = 0.00712076822916666666;\r\nvar C66 = 0.36458333333333333333;\r\nvar C68 = 0.00569661458333333333;\r\nvar C88 = 0.3076171875;\r\n\r\nexport default function(es) {\r\n  var en = [];\r\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\r\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\r\n  var t = es * es;\r\n  en[2] = t * (C44 - es * (C46 + es * C48));\r\n  t *= es;\r\n  en[3] = t * (C66 - es * C68);\r\n  en[4] = t * es * C88;\r\n  return en;\r\n}", "export default function(phi, sphi, cphi, en) {\r\n  cphi *= sphi;\r\n  sphi *= sphi;\r\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\r\n}", "import pj_mlfn from \"./pj_mlfn\";\r\nimport {EPSLN} from '../constants/values';\r\n\r\nvar MAX_ITER = 20;\r\n\r\nexport default function(arg, es, en) {\r\n  var k = 1 / (1 - es);\r\n  var phi = arg;\r\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\r\n    var s = Math.sin(phi);\r\n    var t = 1 - es * s * s;\r\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\r\n    //phi -= t * (t * Math.sqrt(t)) * k;\r\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\r\n    phi -= t;\r\n    if (Math.abs(t) < EPSLN) {\r\n      return phi;\r\n    }\r\n  }\r\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\r\n  return phi;\r\n}\r\n", "// Heavily based on this tmerc projection implementation\r\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\r\n\r\nimport pj_enfn from '../common/pj_enfn';\r\nimport pj_mlfn from '../common/pj_mlfn';\r\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\r\nimport adjust_lon from '../common/adjust_lon';\r\n\r\nimport {EPSLN, HALF_PI} from '../constants/values';\r\nimport sign from '../common/sign';\r\n\r\nexport function init() {\r\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\r\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\r\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\r\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\r\n\r\n  if (this.es) {\r\n    this.en = pj_enfn(this.es);\r\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\r\n  }\r\n}\r\n\r\n/**\r\n    Transverse Mercator Forward  - long/lat to x/y\r\n    long/lat in radians\r\n  */\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  var delta_lon = adjust_lon(lon - this.long0);\r\n  var con;\r\n  var x, y;\r\n  var sin_phi = Math.sin(lat);\r\n  var cos_phi = Math.cos(lat);\r\n\r\n  if (!this.es) {\r\n    var b = cos_phi * Math.sin(delta_lon);\r\n\r\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\r\n      return (93);\r\n    }\r\n    else {\r\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\r\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\r\n      b = Math.abs(y);\r\n\r\n      if (b >= 1) {\r\n        if ((b - 1) > EPSLN) {\r\n          return (93);\r\n        }\r\n        else {\r\n          y = 0;\r\n        }\r\n      }\r\n      else {\r\n        y = Math.acos(y);\r\n      }\r\n\r\n      if (lat < 0) {\r\n        y = -y;\r\n      }\r\n\r\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\r\n    }\r\n  }\r\n  else {\r\n    var al = cos_phi * delta_lon;\r\n    var als = Math.pow(al, 2);\r\n    var c = this.ep2 * Math.pow(cos_phi, 2);\r\n    var cs = Math.pow(c, 2);\r\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\r\n    var t = Math.pow(tq, 2);\r\n    var ts = Math.pow(t, 2);\r\n    con = 1 - this.es * Math.pow(sin_phi, 2);\r\n    al = al / Math.sqrt(con);\r\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\r\n\r\n    x = this.a * (this.k0 * al * (1 +\r\n      als / 6 * (1 - t + c +\r\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\r\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\r\n      this.x0;\r\n\r\n    y = this.a * (this.k0 * (ml - this.ml0 +\r\n      sin_phi * delta_lon * al / 2 * (1 +\r\n      als / 12 * (5 - t + 9 * c + 4 * cs +\r\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\r\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\r\n      this.y0;\r\n  }\r\n\r\n  p.x = x;\r\n  p.y = y;\r\n\r\n  return p;\r\n}\r\n\r\n/**\r\n    Transverse Mercator Inverse  -  x/y to long/lat\r\n  */\r\nexport function inverse(p) {\r\n  var con, phi;\r\n  var lat, lon;\r\n  var x = (p.x - this.x0) * (1 / this.a);\r\n  var y = (p.y - this.y0) * (1 / this.a);\r\n\r\n  if (!this.es) {\r\n    var f = Math.exp(x / this.k0);\r\n    var g = 0.5 * (f - 1 / f);\r\n    var temp = this.lat0 + y / this.k0;\r\n    var h = Math.cos(temp);\r\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\r\n    lat = Math.asin(con);\r\n\r\n    if (y < 0) {\r\n      lat = -lat;\r\n    }\r\n\r\n    if ((g === 0) && (h === 0)) {\r\n      lon = 0;\r\n    }\r\n    else {\r\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\r\n    }\r\n  }\r\n  else { // ellipsoidal form\r\n    con = this.ml0 + y / this.k0;\r\n    phi = pj_inv_mlfn(con, this.es, this.en);\r\n\r\n    if (Math.abs(phi) < HALF_PI) {\r\n      var sin_phi = Math.sin(phi);\r\n      var cos_phi = Math.cos(phi);\r\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\r\n      var c = this.ep2 * Math.pow(cos_phi, 2);\r\n      var cs = Math.pow(c, 2);\r\n      var t = Math.pow(tan_phi, 2);\r\n      var ts = Math.pow(t, 2);\r\n      con = 1 - this.es * Math.pow(sin_phi, 2);\r\n      var d = x * Math.sqrt(con) / this.k0;\r\n      var ds = Math.pow(d, 2);\r\n      con = con * tan_phi;\r\n\r\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\r\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\r\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\r\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\r\n\r\n      lon = adjust_lon(this.long0 + (d * (1 -\r\n        ds / 6 * (1 + 2 * t + c -\r\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\r\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\r\n    }\r\n    else {\r\n      lat = HALF_PI * sign(y);\r\n      lon = 0;\r\n    }\r\n  }\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "export default function(x) {\r\n  var r = Math.exp(x);\r\n  r = (r - 1 / r) / 2;\r\n  return r;\r\n}", "export default function(x, y) {\r\n  x = Math.abs(x);\r\n  y = Math.abs(y);\r\n  var a = Math.max(x, y);\r\n  var b = Math.min(x, y) / (a ? a : 1);\r\n\r\n  return a * Math.sqrt(1 + Math.pow(b, 2));\r\n}\r\n", "export default function(x) {\r\n  var y = 1 + x;\r\n  var z = y - 1;\r\n\r\n  return z === 0 ? x : x * Math.log(y) / z;\r\n}\r\n", "import hypot from './hypot';\r\nimport log1py from './log1py';\r\n\r\nexport default function(x) {\r\n  var y = Math.abs(x);\r\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\r\n\r\n  return x < 0 ? -y : y;\r\n}\r\n", "export default function(pp, B) {\r\n  var cos_2B = 2 * Math.cos(2 * B);\r\n  var i = pp.length - 1;\r\n  var h1 = pp[i];\r\n  var h2 = 0;\r\n  var h;\r\n\r\n  while (--i >= 0) {\r\n    h = -h2 + cos_2B * h1 + pp[i];\r\n    h2 = h1;\r\n    h1 = h;\r\n  }\r\n\r\n  return (B + h * Math.sin(2 * B));\r\n}\r\n", "export default function(pp, arg_r) {\r\n  var r = 2 * Math.cos(arg_r);\r\n  var i = pp.length - 1;\r\n  var hr1 = pp[i];\r\n  var hr2 = 0;\r\n  var hr;\r\n\r\n  while (--i >= 0) {\r\n    hr = -hr2 + r * hr1 + pp[i];\r\n    hr2 = hr1;\r\n    hr1 = hr;\r\n  }\r\n\r\n  return Math.sin(arg_r) * hr;\r\n}\r\n", "export default function(x) {\r\n  var r = Math.exp(x);\r\n  r = (r + 1 / r) / 2;\r\n  return r;\r\n}", "import sinh from './sinh';\r\nimport cosh from './cosh';\r\n\r\nexport default function(pp, arg_r, arg_i) {\r\n  var sin_arg_r = Math.sin(arg_r);\r\n  var cos_arg_r = Math.cos(arg_r);\r\n  var sinh_arg_i = sinh(arg_i);\r\n  var cosh_arg_i = cosh(arg_i);\r\n  var r = 2 * cos_arg_r * cosh_arg_i;\r\n  var i = -2 * sin_arg_r * sinh_arg_i;\r\n  var j = pp.length - 1;\r\n  var hr = pp[j];\r\n  var hi1 = 0;\r\n  var hr1 = 0;\r\n  var hi = 0;\r\n  var hr2;\r\n  var hi2;\r\n\r\n  while (--j >= 0) {\r\n    hr2 = hr1;\r\n    hi2 = hi1;\r\n    hr1 = hr;\r\n    hi1 = hi;\r\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\r\n    hi = -hi2 + i * hr1 + r * hi1;\r\n  }\r\n\r\n  r = sin_arg_r * cosh_arg_i;\r\n  i = cos_arg_r * sinh_arg_i;\r\n\r\n  return [r * hr - i * hi, r * hi + i * hr];\r\n}\r\n", "// Heavily based on this etmerc projection implementation\r\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\r\n\r\nimport tmerc from '../projections/tmerc';\r\nimport sinh from '../common/sinh';\r\nimport hypot from '../common/hypot';\r\nimport asinhy from '../common/asinhy';\r\nimport gatg from '../common/gatg';\r\nimport clens from '../common/clens';\r\nimport clens_cmplx from '../common/clens_cmplx';\r\nimport adjust_lon from '../common/adjust_lon';\r\n\r\nexport function init() {\r\n  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\r\n    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\r\n  }\r\n  if (this.approx) {\r\n    // When '+approx' is set, use tmerc instead\r\n    tmerc.init.apply(this);\r\n    this.forward = tmerc.forward;\r\n    this.inverse = tmerc.inverse;\r\n  }\r\n\r\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\r\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\r\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\r\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\r\n\r\n  this.cgb = [];\r\n  this.cbg = [];\r\n  this.utg = [];\r\n  this.gtu = [];\r\n\r\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\r\n  var n = f / (2 - f);\r\n  var np = n;\r\n\r\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\r\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\r\n\r\n  np = np * n;\r\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\r\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\r\n\r\n  np = np * n;\r\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\r\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\r\n\r\n  np = np * n;\r\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\r\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\r\n\r\n  np = np * n;\r\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\r\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\r\n\r\n  np = np * n;\r\n  this.cgb[5] = np * (601676 / 22275);\r\n  this.cbg[5] = np * (444337 / 155925);\r\n\r\n  np = Math.pow(n, 2);\r\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\r\n\r\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\r\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\r\n\r\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\r\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\r\n\r\n  np = np * n;\r\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\r\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\r\n\r\n  np = np * n;\r\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\r\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\r\n\r\n  np = np * n;\r\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\r\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\r\n\r\n  np = np * n;\r\n  this.utg[5] = np * (-20648693 / 638668800);\r\n  this.gtu[5] = np * (212378941 / 319334400);\r\n\r\n  var Z = gatg(this.cbg, this.lat0);\r\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\r\n}\r\n\r\nexport function forward(p) {\r\n  var Ce = adjust_lon(p.x - this.long0);\r\n  var Cn = p.y;\r\n\r\n  Cn = gatg(this.cbg, Cn);\r\n  var sin_Cn = Math.sin(Cn);\r\n  var cos_Cn = Math.cos(Cn);\r\n  var sin_Ce = Math.sin(Ce);\r\n  var cos_Ce = Math.cos(Ce);\r\n\r\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\r\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\r\n  Ce = asinhy(Math.tan(Ce));\r\n\r\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\r\n\r\n  Cn = Cn + tmp[0];\r\n  Ce = Ce + tmp[1];\r\n\r\n  var x;\r\n  var y;\r\n\r\n  if (Math.abs(Ce) <= 2.623395162778) {\r\n    x = this.a * (this.Qn * Ce) + this.x0;\r\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\r\n  }\r\n  else {\r\n    x = Infinity;\r\n    y = Infinity;\r\n  }\r\n\r\n  p.x = x;\r\n  p.y = y;\r\n\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var Ce = (p.x - this.x0) * (1 / this.a);\r\n  var Cn = (p.y - this.y0) * (1 / this.a);\r\n\r\n  Cn = (Cn - this.Zb) / this.Qn;\r\n  Ce = Ce / this.Qn;\r\n\r\n  var lon;\r\n  var lat;\r\n\r\n  if (Math.abs(Ce) <= 2.623395162778) {\r\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\r\n\r\n    Cn = Cn + tmp[0];\r\n    Ce = Ce + tmp[1];\r\n    Ce = Math.atan(sinh(Ce));\r\n\r\n    var sin_Cn = Math.sin(Cn);\r\n    var cos_Cn = Math.cos(Cn);\r\n    var sin_Ce = Math.sin(Ce);\r\n    var cos_Ce = Math.cos(Ce);\r\n\r\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\r\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\r\n\r\n    lon = adjust_lon(Ce + this.long0);\r\n    lat = gatg(this.cgb, Cn);\r\n  }\r\n  else {\r\n    lon = Infinity;\r\n    lat = Infinity;\r\n  }\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"Gauss Kruger\", \"Gauss_Kruger\", \"tmerc\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from './adjust_lon';\r\n\r\nexport default function(zone, lon) {\r\n  if (zone === undefined) {\r\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\r\n\r\n    if (zone < 0) {\r\n      return 0;\r\n    } else if (zone > 60) {\r\n      return 60;\r\n    }\r\n  }\r\n  return zone;\r\n}\r\n", "import adjust_zone from '../common/adjust_zone';\r\nimport etmerc from './etmerc';\r\nexport var dependsOn = 'etmerc';\r\nimport {D2R} from '../constants/values';\r\n\r\n\r\nexport function init() {\r\n  var zone = adjust_zone(this.zone, this.long0);\r\n  if (zone === undefined) {\r\n    throw new Error('unknown utm zone');\r\n  }\r\n  this.lat0 = 0;\r\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\r\n  this.x0 = 500000;\r\n  this.y0 = this.utmSouth ? 10000000 : 0;\r\n  this.k0 = 0.9996;\r\n\r\n  etmerc.init.apply(this);\r\n  this.forward = etmerc.forward;\r\n  this.inverse = etmerc.inverse;\r\n}\r\n\r\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\r\nexport default {\r\n  init: init,\r\n  names: names,\r\n  dependsOn: dependsOn\r\n};\r\n", "export default function(esinp, exp) {\r\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\r\n}", "import srat from '../common/srat';\r\nvar MAX_ITER = 20;\r\nimport {HALF_PI, FORTPI} from '../constants/values';\r\n\r\nexport function init() {\r\n  var sphi = Math.sin(this.lat0);\r\n  var cphi = Math.cos(this.lat0);\r\n  cphi *= cphi;\r\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\r\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\r\n  this.phic0 = Math.asin(sphi / this.C);\r\n  this.ratexp = 0.5 * this.C * this.e;\r\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\r\n}\r\n\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\r\n  p.x = this.C * lon;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var DEL_TOL = 1e-14;\r\n  var lon = p.x / this.C;\r\n  var lat = p.y;\r\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\r\n  for (var i = MAX_ITER; i > 0; --i) {\r\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\r\n    if (Math.abs(lat - p.y) < DEL_TOL) {\r\n      break;\r\n    }\r\n    p.y = lat;\r\n  }\r\n  /* convergence failed */\r\n  if (!i) {\r\n    return null;\r\n  }\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"gauss\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import gauss from './gauss';\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport hypot from '../common/hypot';\r\n\r\nexport function init() {\r\n  gauss.init.apply(this);\r\n  if (!this.rc) {\r\n    return;\r\n  }\r\n  this.sinc0 = Math.sin(this.phic0);\r\n  this.cosc0 = Math.cos(this.phic0);\r\n  this.R2 = 2 * this.rc;\r\n  if (!this.title) {\r\n    this.title = \"Oblique Stereographic Alternative\";\r\n  }\r\n}\r\n\r\nexport function forward(p) {\r\n  var sinc, cosc, cosl, k;\r\n  p.x = adjust_lon(p.x - this.long0);\r\n  gauss.forward.apply(this, [p]);\r\n  sinc = Math.sin(p.y);\r\n  cosc = Math.cos(p.y);\r\n  cosl = Math.cos(p.x);\r\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\r\n  p.x = k * cosc * Math.sin(p.x);\r\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\r\n  p.x = this.a * p.x + this.x0;\r\n  p.y = this.a * p.y + this.y0;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var sinc, cosc, lon, lat, rho;\r\n  p.x = (p.x - this.x0) / this.a;\r\n  p.y = (p.y - this.y0) / this.a;\r\n\r\n  p.x /= this.k0;\r\n  p.y /= this.k0;\r\n  if ((rho = hypot(p.x, p.y))) {\r\n    var c = 2 * Math.atan2(rho, this.R2);\r\n    sinc = Math.sin(c);\r\n    cosc = Math.cos(c);\r\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\r\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\r\n  }\r\n  else {\r\n    lat = this.phic0;\r\n    lon = 0;\r\n  }\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  gauss.inverse.apply(this, [p]);\r\n  p.x = adjust_lon(p.x + this.long0);\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import {EPSLN, HALF_PI} from '../constants/values';\r\n\r\nimport sign from '../common/sign';\r\nimport msfnz from '../common/msfnz';\r\nimport tsfnz from '../common/tsfnz';\r\nimport phi2z from '../common/phi2z';\r\nimport adjust_lon from '../common/adjust_lon';\r\n\r\nexport function ssfn_(phit, sinphi, eccen) {\r\n  sinphi *= eccen;\r\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\r\n}\r\n\r\nexport function init() {\r\n\r\n  // setting default parameters\r\n  this.x0 = this.x0 || 0;\r\n  this.y0 = this.y0 || 0;\r\n  this.lat0 = this.lat0 || 0;\r\n  this.long0 = this.long0 || 0;\r\n\r\n  this.coslat0 = Math.cos(this.lat0);\r\n  this.sinlat0 = Math.sin(this.lat0);\r\n  if (this.sphere) {\r\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\r\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\r\n    }\r\n  }\r\n  else {\r\n    if (Math.abs(this.coslat0) <= EPSLN) {\r\n      if (this.lat0 > 0) {\r\n        //North pole\r\n        //trace('stere:north pole');\r\n        this.con = 1;\r\n      }\r\n      else {\r\n        //South pole\r\n        //trace('stere:south pole');\r\n        this.con = -1;\r\n      }\r\n    }\r\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\r\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {\r\n      // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole\r\n      // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987\r\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\r\n    }\r\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\r\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\r\n    this.cosX0 = Math.cos(this.X0);\r\n    this.sinX0 = Math.sin(this.X0);\r\n  }\r\n}\r\n\r\n// Stereographic forward equations--mapping lat,long to x,y\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  var sinlat = Math.sin(lat);\r\n  var coslat = Math.cos(lat);\r\n  var A, X, sinX, cosX, ts, rh;\r\n  var dlon = adjust_lon(lon - this.long0);\r\n\r\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\r\n    //case of the origine point\r\n    //trace('stere:this is the origin point');\r\n    p.x = NaN;\r\n    p.y = NaN;\r\n    return p;\r\n  }\r\n  if (this.sphere) {\r\n    //trace('stere:sphere case');\r\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\r\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\r\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\r\n    return p;\r\n  }\r\n  else {\r\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\r\n    cosX = Math.cos(X);\r\n    sinX = Math.sin(X);\r\n    if (Math.abs(this.coslat0) <= EPSLN) {\r\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\r\n      rh = 2 * this.a * this.k0 * ts / this.cons;\r\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\r\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\r\n      //trace(p.toString());\r\n      return p;\r\n    }\r\n    else if (Math.abs(this.sinlat0) < EPSLN) {\r\n      //Eq\r\n      //trace('stere:equateur');\r\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\r\n      p.y = A * sinX;\r\n    }\r\n    else {\r\n      //other case\r\n      //trace('stere:normal case');\r\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\r\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\r\n    }\r\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\r\n  }\r\n  //trace(p.toString());\r\n  return p;\r\n}\r\n\r\n//* Stereographic inverse equations--mapping x,y to lat/long\r\nexport function inverse(p) {\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  var lon, lat, ts, ce, Chi;\r\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\r\n  if (this.sphere) {\r\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\r\n    lon = this.long0;\r\n    lat = this.lat0;\r\n    if (rh <= EPSLN) {\r\n      p.x = lon;\r\n      p.y = lat;\r\n      return p;\r\n    }\r\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\r\n    if (Math.abs(this.coslat0) < EPSLN) {\r\n      if (this.lat0 > 0) {\r\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\r\n      }\r\n      else {\r\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\r\n      }\r\n    }\r\n    else {\r\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\r\n    }\r\n    p.x = lon;\r\n    p.y = lat;\r\n    return p;\r\n  }\r\n  else {\r\n    if (Math.abs(this.coslat0) <= EPSLN) {\r\n      if (rh <= EPSLN) {\r\n        lat = this.lat0;\r\n        lon = this.long0;\r\n        p.x = lon;\r\n        p.y = lat;\r\n        //trace(p.toString());\r\n        return p;\r\n      }\r\n      p.x *= this.con;\r\n      p.y *= this.con;\r\n      ts = rh * this.cons / (2 * this.a * this.k0);\r\n      lat = this.con * phi2z(this.e, ts);\r\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\r\n    }\r\n    else {\r\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\r\n      lon = this.long0;\r\n      if (rh <= EPSLN) {\r\n        Chi = this.X0;\r\n      }\r\n      else {\r\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\r\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\r\n      }\r\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\r\n    }\r\n  }\r\n  p.x = lon;\r\n  p.y = lat;\r\n\r\n  //trace(p.toString());\r\n  return p;\r\n\r\n}\r\n\r\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\", \"Polar_Stereographic\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names,\r\n  ssfn_: ssfn_\r\n};\r\n", "/*\r\n  references:\r\n    Formules et constantes pour le Calcul pour la\r\n    projection cylindrique conforme à axe oblique et pour la transformation entre\r\n    des systèmes de référence.\r\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\r\n  */\r\n\r\nexport function init() {\r\n  var phy0 = this.lat0;\r\n  this.lambda0 = this.long0;\r\n  var sinPhy0 = Math.sin(phy0);\r\n  var semiMajorAxis = this.a;\r\n  var invF = this.rf;\r\n  var flattening = 1 / invF;\r\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\r\n  var e = this.e = Math.sqrt(e2);\r\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\r\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\r\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\r\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\r\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\r\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\r\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\r\n}\r\n\r\nexport function forward(p) {\r\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\r\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\r\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\r\n\r\n  // spheric latitude\r\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\r\n\r\n  // spheric longitude\r\n  var I = this.alpha * (p.x - this.lambda0);\r\n\r\n  // psoeudo equatorial rotation\r\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\r\n\r\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\r\n\r\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\r\n  p.x = this.R * rotI + this.x0;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var Y = p.x - this.x0;\r\n  var X = p.y - this.y0;\r\n\r\n  var rotI = Y / this.R;\r\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\r\n\r\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\r\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\r\n\r\n  var lambda = this.lambda0 + I / this.alpha;\r\n\r\n  var S = 0;\r\n  var phy = b;\r\n  var prevPhy = -1000;\r\n  var iteration = 0;\r\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\r\n    if (++iteration > 20) {\r\n      //...reportError(\"omercFwdInfinity\");\r\n      return;\r\n    }\r\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\r\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\r\n    prevPhy = phy;\r\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\r\n  }\r\n\r\n  p.x = lambda;\r\n  p.y = phy;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"somerc\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import tsfnz from '../common/tsfnz';\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport phi2z from '../common/phi2z';\r\nimport { D2R, EPSLN, HALF_PI, TWO_PI, FORTPI } from '../constants/values';\r\n\r\nvar TOL = 1e-7;\r\n\r\nfunction isTypeA(P) {\r\n  var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\r\n  var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\r\n  \r\n  return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\r\n}\r\n\r\n\r\n/* Initialize the Oblique Mercator  projection\r\n    ------------------------------------------*/\r\nexport function init() {  \r\n  var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\r\n    gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;\r\n  \r\n  // only Type A uses the no_off or no_uoff property\r\n  // https://github.com/OSGeo/proj.4/issues/104\r\n  this.no_off = isTypeA(this);\r\n  this.no_rot = 'no_rot' in this;\r\n  \r\n  var alp = false;\r\n  if (\"alpha\" in this) {\r\n    alp = true;\r\n  }\r\n\r\n  var gam = false;\r\n  if (\"rectified_grid_angle\" in this) {\r\n    gam = true;\r\n  }\r\n\r\n  if (alp) {\r\n    alpha_c = this.alpha;\r\n  }\r\n  \r\n  if (gam) {\r\n    gamma = (this.rectified_grid_angle * D2R);\r\n  }\r\n  \r\n  if (alp || gam) {\r\n    lamc = this.longc;\r\n  } else {\r\n    lam1 = this.long1;\r\n    phi1 = this.lat1;\r\n    lam2 = this.long2;\r\n    phi2 = this.lat2;\r\n    \r\n    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\r\n        Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\r\n        Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\r\n      throw new Error();\r\n    }\r\n  }\r\n  \r\n  var one_es = 1.0 - this.es;\r\n  com = Math.sqrt(one_es);\r\n  \r\n  if (Math.abs(this.lat0) > EPSLN) {\r\n    sinph0 = Math.sin(this.lat0);\r\n    cosph0 = Math.cos(this.lat0);\r\n    con = 1 - this.es * sinph0 * sinph0;\r\n    this.B = cosph0 * cosph0;\r\n    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\r\n    this.A = this.B * this.k0 * com / con;\r\n    D = this.B * com / (cosph0 * Math.sqrt(con));\r\n    F = D * D -1;\r\n    \r\n    if (F <= 0) {\r\n      F = 0;\r\n    } else {\r\n      F = Math.sqrt(F);\r\n      if (this.lat0 < 0) {\r\n        F = -F;\r\n      }\r\n    }\r\n    \r\n    this.E = F += D;\r\n    this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\r\n  } else {\r\n    this.B = 1 / com;\r\n    this.A = this.k0;\r\n    this.E = D = F = 1;\r\n  }\r\n  \r\n  if (alp || gam) {\r\n    if (alp) {\r\n      gamma0 = Math.asin(Math.sin(alpha_c) / D);\r\n      if (!gam) {\r\n        gamma = alpha_c;\r\n      }\r\n    } else {\r\n      gamma0 = gamma;\r\n      alpha_c = Math.asin(D * Math.sin(gamma0));\r\n    }\r\n    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\r\n  } else {\r\n    H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\r\n    L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\r\n    F = this.E / H;\r\n    p = (L - H) / (L + H);\r\n    J = this.E * this.E;\r\n    J = (J - L * H) / (J + L * H);\r\n    con = lam1 - lam2;\r\n    \r\n    if (con < -Math.pi) {\r\n      lam2 -=TWO_PI;\r\n    } else if (con > Math.pi) {\r\n      lam2 += TWO_PI;\r\n    }\r\n    \r\n    this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\r\n    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\r\n    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\r\n  }\r\n  \r\n  this.singam = Math.sin(gamma0);\r\n  this.cosgam = Math.cos(gamma0);\r\n  this.sinrot = Math.sin(gamma);\r\n  this.cosrot = Math.cos(gamma);\r\n  \r\n  this.rB = 1 / this.B;\r\n  this.ArB = this.A * this.rB;\r\n  this.BrA = 1 / this.ArB;\r\n  AB = this.A * this.B;\r\n  \r\n  if (this.no_off) {\r\n    this.u_0 = 0;\r\n  } else {\r\n    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\r\n    \r\n    if (this.lat0 < 0) {\r\n      this.u_0 = - this.u_0;\r\n    }  \r\n  }\r\n    \r\n  F = 0.5 * gamma0;\r\n  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\r\n  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\r\n}\r\n\r\n\r\n/* Oblique Mercator forward equations--mapping lat,long to x,y\r\n    ----------------------------------------------------------*/\r\nexport function forward(p) {\r\n  var coords = {};\r\n  var S, T, U, V, W, temp, u, v;\r\n  p.x = p.x - this.lam0;\r\n  \r\n  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\r\n    W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\r\n    \r\n    temp = 1 / W;\r\n    S = 0.5 * (W - temp);\r\n    T = 0.5 * (W + temp);\r\n    V = Math.sin(this.B * p.x);\r\n    U = (S * this.singam - V * this.cosgam) / T;\r\n        \r\n    if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\r\n      throw new Error();\r\n    }\r\n    \r\n    v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\r\n    temp = Math.cos(this.B * p.x);\r\n    \r\n    if (Math.abs(temp) < TOL) {\r\n      u = this.A * p.x;\r\n    } else {\r\n      u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\r\n    }    \r\n  } else {\r\n    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\r\n    u = this.ArB * p.y;\r\n  }\r\n     \r\n  if (this.no_rot) {\r\n    coords.x = u;\r\n    coords.y = v;\r\n  } else {\r\n    u -= this.u_0;\r\n    coords.x = v * this.cosrot + u * this.sinrot;\r\n    coords.y = u * this.cosrot - v * this.sinrot;\r\n  }\r\n  \r\n  coords.x = (this.a * coords.x + this.x0);\r\n  coords.y = (this.a * coords.y + this.y0);\r\n  \r\n  return coords;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var u, v, Qp, Sp, Tp, Vp, Up;\r\n  var coords = {};\r\n  \r\n  p.x = (p.x - this.x0) * (1.0 / this.a);\r\n  p.y = (p.y - this.y0) * (1.0 / this.a);\r\n\r\n  if (this.no_rot) {\r\n    v = p.y;\r\n    u = p.x;\r\n  } else {\r\n    v = p.x * this.cosrot - p.y * this.sinrot;\r\n    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\r\n  }\r\n  \r\n  Qp = Math.exp(-this.BrA * v);\r\n  Sp = 0.5 * (Qp - 1 / Qp);\r\n  Tp = 0.5 * (Qp + 1 / Qp);\r\n  Vp = Math.sin(this.BrA * u);\r\n  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\r\n  \r\n  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\r\n    coords.x = 0;\r\n    coords.y = Up < 0 ? -HALF_PI : HALF_PI;\r\n  } else {\r\n    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\r\n    coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\r\n    \r\n    if (coords.y === Infinity) {\r\n      throw new Error();\r\n    }\r\n        \r\n    coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\r\n  }\r\n  \r\n  coords.x += this.lam0;\r\n  \r\n  return coords;\r\n}\r\n\r\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import msfnz from '../common/msfnz';\r\nimport tsfnz from '../common/tsfnz';\r\nimport sign from '../common/sign';\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport phi2z from '../common/phi2z';\r\nimport {HALF_PI, EPSLN} from '../constants/values';\r\nexport function init() {\r\n  \r\n  //double lat0;                    /* the reference latitude               */\r\n  //double long0;                   /* the reference longitude              */\r\n  //double lat1;                    /* first standard parallel              */\r\n  //double lat2;                    /* second standard parallel             */\r\n  //double r_maj;                   /* major axis                           */\r\n  //double r_min;                   /* minor axis                           */\r\n  //double false_east;              /* x offset in meters                   */\r\n  //double false_north;             /* y offset in meters                   */\r\n  \r\n  //the above value can be set with proj4.defs\r\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\r\n\r\n  if (!this.lat2) {\r\n    this.lat2 = this.lat1;\r\n  } //if lat2 is not defined\r\n  if (!this.k0) {\r\n    this.k0 = 1;\r\n  }\r\n  this.x0 = this.x0 || 0;\r\n  this.y0 = this.y0 || 0;\r\n  // Standard Parallels cannot be equal and on opposite sides of the equator\r\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\r\n    return;\r\n  }\r\n\r\n  var temp = this.b / this.a;\r\n  this.e = Math.sqrt(1 - temp * temp);\r\n\r\n  var sin1 = Math.sin(this.lat1);\r\n  var cos1 = Math.cos(this.lat1);\r\n  var ms1 = msfnz(this.e, sin1, cos1);\r\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\r\n\r\n  var sin2 = Math.sin(this.lat2);\r\n  var cos2 = Math.cos(this.lat2);\r\n  var ms2 = msfnz(this.e, sin2, cos2);\r\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\r\n\r\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\r\n\r\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\r\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\r\n  }\r\n  else {\r\n    this.ns = sin1;\r\n  }\r\n  if (isNaN(this.ns)) {\r\n    this.ns = sin1;\r\n  }\r\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\r\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\r\n  if (!this.title) {\r\n    this.title = \"Lambert Conformal Conic\";\r\n  }\r\n}\r\n\r\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\r\n// -----------------------------------------------------------------\r\nexport function forward(p) {\r\n\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  // singular cases :\r\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\r\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\r\n  }\r\n\r\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\r\n  var ts, rh1;\r\n  if (con > EPSLN) {\r\n    ts = tsfnz(this.e, lat, Math.sin(lat));\r\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\r\n  }\r\n  else {\r\n    con = lat * this.ns;\r\n    if (con <= 0) {\r\n      return null;\r\n    }\r\n    rh1 = 0;\r\n  }\r\n  var theta = this.ns * adjust_lon(lon - this.long0);\r\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\r\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\r\n\r\n  return p;\r\n}\r\n\r\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\r\n// -----------------------------------------------------------------\r\nexport function inverse(p) {\r\n\r\n  var rh1, con, ts;\r\n  var lat, lon;\r\n  var x = (p.x - this.x0) / this.k0;\r\n  var y = (this.rh - (p.y - this.y0) / this.k0);\r\n  if (this.ns > 0) {\r\n    rh1 = Math.sqrt(x * x + y * y);\r\n    con = 1;\r\n  }\r\n  else {\r\n    rh1 = -Math.sqrt(x * x + y * y);\r\n    con = -1;\r\n  }\r\n  var theta = 0;\r\n  if (rh1 !== 0) {\r\n    theta = Math.atan2((con * x), (con * y));\r\n  }\r\n  if ((rh1 !== 0) || (this.ns > 0)) {\r\n    con = 1 / this.ns;\r\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\r\n    lat = phi2z(this.e, ts);\r\n    if (lat === -9999) {\r\n      return null;\r\n    }\r\n  }\r\n  else {\r\n    lat = -HALF_PI;\r\n  }\r\n  lon = adjust_lon(theta / this.ns + this.long0);\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\r\n  \"Lambert Tangential Conformal Conic Projection\",\r\n  \"Lambert_Conformal_Conic\",\r\n  \"Lambert_Conformal_Conic_1SP\",\r\n  \"Lambert_Conformal_Conic_2SP\",\r\n  \"lcc\",\r\n  \"Lambert Conic Conformal (1SP)\",\r\n  \"Lambert Conic Conformal (2SP)\"\r\n];\r\n\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\n\r\nexport function init() {\r\n  this.a = 6377397.155;\r\n  this.es = 0.006674372230614;\r\n  this.e = Math.sqrt(this.es);\r\n  if (!this.lat0) {\r\n    this.lat0 = 0.863937979737193;\r\n  }\r\n  if (!this.long0) {\r\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\r\n  }\r\n  /* if scale not set default to 0.9999 */\r\n  if (!this.k0) {\r\n    this.k0 = 0.9999;\r\n  }\r\n  this.s45 = 0.785398163397448; /* 45 */\r\n  this.s90 = 2 * this.s45;\r\n  this.fi0 = this.lat0;\r\n  this.e2 = this.es;\r\n  this.e = Math.sqrt(this.e2);\r\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\r\n  this.uq = 1.04216856380474;\r\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\r\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\r\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\r\n  this.k1 = this.k0;\r\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\r\n  this.s0 = 1.37008346281555;\r\n  this.n = Math.sin(this.s0);\r\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\r\n  this.ad = this.s90 - this.uq;\r\n}\r\n\r\n/* ellipsoid */\r\n/* calculate xy from lat/lon */\r\n/* Constants, identical to inverse transform function */\r\nexport function forward(p) {\r\n  var gfi, u, deltav, s, d, eps, ro;\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  var delta_lon = adjust_lon(lon - this.long0);\r\n  /* Transformation */\r\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\r\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\r\n  deltav = -delta_lon * this.alfa;\r\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\r\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\r\n  eps = this.n * d;\r\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\r\n  p.y = ro * Math.cos(eps) / 1;\r\n  p.x = ro * Math.sin(eps) / 1;\r\n\r\n  if (!this.czech) {\r\n    p.y *= -1;\r\n    p.x *= -1;\r\n  }\r\n  return (p);\r\n}\r\n\r\n/* calculate lat/lon from xy */\r\nexport function inverse(p) {\r\n  var u, deltav, s, d, eps, ro, fi1;\r\n  var ok;\r\n\r\n  /* Transformation */\r\n  /* revert y, x*/\r\n  var tmp = p.x;\r\n  p.x = p.y;\r\n  p.y = tmp;\r\n  if (!this.czech) {\r\n    p.y *= -1;\r\n    p.x *= -1;\r\n  }\r\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\r\n  eps = Math.atan2(p.y, p.x);\r\n  d = eps / Math.sin(this.s0);\r\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\r\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\r\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\r\n  p.x = this.long0 - deltav / this.alfa;\r\n  fi1 = u;\r\n  ok = 0;\r\n  var iter = 0;\r\n  do {\r\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\r\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\r\n      ok = 1;\r\n    }\r\n    fi1 = p.y;\r\n    iter += 1;\r\n  } while (ok === 0 && iter < 15);\r\n  if (iter >= 15) {\r\n    return null;\r\n  }\r\n\r\n  return (p);\r\n}\r\n\r\nexport var names = [\"Krovak\", \"krovak\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "export default function(e0, e1, e2, e3, phi) {\r\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\r\n}", "export default function(x) {\r\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\r\n}", "export default function(x) {\r\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\r\n}", "export default function(x) {\r\n  return (0.05859375 * x * x * (1 + 0.75 * x));\r\n}", "export default function(x) {\r\n  return (x * x * x * (35 / 3072));\r\n}", "export default function(a, e, sinphi) {\r\n  var temp = e * sinphi;\r\n  return a / Math.sqrt(1 - temp * temp);\r\n}", "import {HALF_PI} from '../constants/values';\r\nimport sign from './sign';\r\n\r\nexport default function(x) {\r\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\r\n}\r\n", "export default function(ml, e0, e1, e2, e3) {\r\n  var phi;\r\n  var dphi;\r\n\r\n  phi = ml / e0;\r\n  for (var i = 0; i < 15; i++) {\r\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\r\n    phi += dphi;\r\n    if (Math.abs(dphi) <= 0.0000000001) {\r\n      return phi;\r\n    }\r\n  }\r\n\r\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\r\n  return NaN;\r\n}", "import mlfn from '../common/mlfn';\r\nimport e0fn from '../common/e0fn';\r\nimport e1fn from '../common/e1fn';\r\nimport e2fn from '../common/e2fn';\r\nimport e3fn from '../common/e3fn';\r\nimport gN from '../common/gN';\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport adjust_lat from '../common/adjust_lat';\r\nimport imlfn from '../common/imlfn';\r\nimport {HALF_PI, EPSLN} from '../constants/values';\r\n\r\nexport function init() {\r\n  if (!this.sphere) {\r\n    this.e0 = e0fn(this.es);\r\n    this.e1 = e1fn(this.es);\r\n    this.e2 = e2fn(this.es);\r\n    this.e3 = e3fn(this.es);\r\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\r\n  }\r\n}\r\n\r\n/* Cassini forward equations--mapping lat,long to x,y\r\n  -----------------------------------------------------------------------*/\r\nexport function forward(p) {\r\n\r\n  /* Forward equations\r\n      -----------------*/\r\n  var x, y;\r\n  var lam = p.x;\r\n  var phi = p.y;\r\n  lam = adjust_lon(lam - this.long0);\r\n\r\n  if (this.sphere) {\r\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\r\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\r\n  }\r\n  else {\r\n    //ellipsoid\r\n    var sinphi = Math.sin(phi);\r\n    var cosphi = Math.cos(phi);\r\n    var nl = gN(this.a, this.e, sinphi);\r\n    var tl = Math.tan(phi) * Math.tan(phi);\r\n    var al = lam * Math.cos(phi);\r\n    var asq = al * al;\r\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\r\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\r\n\r\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\r\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\r\n\r\n\r\n  }\r\n\r\n  p.x = x + this.x0;\r\n  p.y = y + this.y0;\r\n  return p;\r\n}\r\n\r\n/* Inverse equations\r\n  -----------------*/\r\nexport function inverse(p) {\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  var x = p.x / this.a;\r\n  var y = p.y / this.a;\r\n  var phi, lam;\r\n\r\n  if (this.sphere) {\r\n    var dd = y + this.lat0;\r\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\r\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\r\n  }\r\n  else {\r\n    /* ellipsoid */\r\n    var ml1 = this.ml0 / this.a + y;\r\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\r\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\r\n      p.x = this.long0;\r\n      p.y = HALF_PI;\r\n      if (y < 0) {\r\n        p.y *= -1;\r\n      }\r\n      return p;\r\n    }\r\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\r\n\r\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\r\n    var tl1 = Math.pow(Math.tan(phi1), 2);\r\n    var dl = x * this.a / nl1;\r\n    var dsq = dl * dl;\r\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\r\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\r\n\r\n  }\r\n\r\n  p.x = adjust_lon(lam + this.long0);\r\n  p.y = adjust_lat(phi);\r\n  return p;\r\n\r\n}\r\n\r\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "export default function(eccent, sinphi) {\r\n  var con;\r\n  if (eccent > 1.0e-7) {\r\n    con = eccent * sinphi;\r\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\r\n  }\r\n  else {\r\n    return (2 * sinphi);\r\n  }\r\n}", "\r\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\r\n\r\nimport qsfnz from '../common/qsfnz';\r\nimport adjust_lon from '../common/adjust_lon';\r\n\r\n/*\r\n  reference\r\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\r\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\r\n  */\r\n\r\nexport var S_POLE = 1;\r\n\r\nexport var N_POLE = 2;\r\nexport var EQUIT = 3;\r\nexport var OBLIQ = 4;\r\n\r\n/* Initialize the Lambert Azimuthal Equal Area projection\r\n  ------------------------------------------------------*/\r\nexport function init() {\r\n  var t = Math.abs(this.lat0);\r\n  if (Math.abs(t - HALF_PI) < EPSLN) {\r\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\r\n  }\r\n  else if (Math.abs(t) < EPSLN) {\r\n    this.mode = this.EQUIT;\r\n  }\r\n  else {\r\n    this.mode = this.OBLIQ;\r\n  }\r\n  if (this.es > 0) {\r\n    var sinphi;\r\n\r\n    this.qp = qsfnz(this.e, 1);\r\n    this.mmf = 0.5 / (1 - this.es);\r\n    this.apa = authset(this.es);\r\n    switch (this.mode) {\r\n    case this.N_POLE:\r\n      this.dd = 1;\r\n      break;\r\n    case this.S_POLE:\r\n      this.dd = 1;\r\n      break;\r\n    case this.EQUIT:\r\n      this.rq = Math.sqrt(0.5 * this.qp);\r\n      this.dd = 1 / this.rq;\r\n      this.xmf = 1;\r\n      this.ymf = 0.5 * this.qp;\r\n      break;\r\n    case this.OBLIQ:\r\n      this.rq = Math.sqrt(0.5 * this.qp);\r\n      sinphi = Math.sin(this.lat0);\r\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\r\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\r\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\r\n      this.ymf = (this.xmf = this.rq) / this.dd;\r\n      this.xmf *= this.dd;\r\n      break;\r\n    }\r\n  }\r\n  else {\r\n    if (this.mode === this.OBLIQ) {\r\n      this.sinph0 = Math.sin(this.lat0);\r\n      this.cosph0 = Math.cos(this.lat0);\r\n    }\r\n  }\r\n}\r\n\r\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\r\n  -----------------------------------------------------------------------*/\r\nexport function forward(p) {\r\n\r\n  /* Forward equations\r\n      -----------------*/\r\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\r\n  var lam = p.x;\r\n  var phi = p.y;\r\n\r\n  lam = adjust_lon(lam - this.long0);\r\n  if (this.sphere) {\r\n    sinphi = Math.sin(phi);\r\n    cosphi = Math.cos(phi);\r\n    coslam = Math.cos(lam);\r\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\r\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\r\n      if (y <= EPSLN) {\r\n        return null;\r\n      }\r\n      y = Math.sqrt(2 / y);\r\n      x = y * cosphi * Math.sin(lam);\r\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\r\n    }\r\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\r\n      if (this.mode === this.N_POLE) {\r\n        coslam = -coslam;\r\n      }\r\n      if (Math.abs(phi + this.lat0) < EPSLN) {\r\n        return null;\r\n      }\r\n      y = FORTPI - phi * 0.5;\r\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\r\n      x = y * Math.sin(lam);\r\n      y *= coslam;\r\n    }\r\n  }\r\n  else {\r\n    sinb = 0;\r\n    cosb = 0;\r\n    b = 0;\r\n    coslam = Math.cos(lam);\r\n    sinlam = Math.sin(lam);\r\n    sinphi = Math.sin(phi);\r\n    q = qsfnz(this.e, sinphi);\r\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\r\n      sinb = q / this.qp;\r\n      cosb = Math.sqrt(1 - sinb * sinb);\r\n    }\r\n    switch (this.mode) {\r\n    case this.OBLIQ:\r\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\r\n      break;\r\n    case this.EQUIT:\r\n      b = 1 + cosb * coslam;\r\n      break;\r\n    case this.N_POLE:\r\n      b = HALF_PI + phi;\r\n      q = this.qp - q;\r\n      break;\r\n    case this.S_POLE:\r\n      b = phi - HALF_PI;\r\n      q = this.qp + q;\r\n      break;\r\n    }\r\n    if (Math.abs(b) < EPSLN) {\r\n      return null;\r\n    }\r\n    switch (this.mode) {\r\n    case this.OBLIQ:\r\n    case this.EQUIT:\r\n      b = Math.sqrt(2 / b);\r\n      if (this.mode === this.OBLIQ) {\r\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\r\n      }\r\n      else {\r\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\r\n      }\r\n      x = this.xmf * b * cosb * sinlam;\r\n      break;\r\n    case this.N_POLE:\r\n    case this.S_POLE:\r\n      if (q >= 0) {\r\n        x = (b = Math.sqrt(q)) * sinlam;\r\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\r\n      }\r\n      else {\r\n        x = y = 0;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  p.x = this.a * x + this.x0;\r\n  p.y = this.a * y + this.y0;\r\n  return p;\r\n}\r\n\r\n/* Inverse equations\r\n  -----------------*/\r\nexport function inverse(p) {\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  var x = p.x / this.a;\r\n  var y = p.y / this.a;\r\n  var lam, phi, cCe, sCe, q, rho, ab;\r\n  if (this.sphere) {\r\n    var cosz = 0,\r\n      rh, sinz = 0;\r\n\r\n    rh = Math.sqrt(x * x + y * y);\r\n    phi = rh * 0.5;\r\n    if (phi > 1) {\r\n      return null;\r\n    }\r\n    phi = 2 * Math.asin(phi);\r\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\r\n      sinz = Math.sin(phi);\r\n      cosz = Math.cos(phi);\r\n    }\r\n    switch (this.mode) {\r\n    case this.EQUIT:\r\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\r\n      x *= sinz;\r\n      y = cosz * rh;\r\n      break;\r\n    case this.OBLIQ:\r\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\r\n      x *= sinz * this.cosph0;\r\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\r\n      break;\r\n    case this.N_POLE:\r\n      y = -y;\r\n      phi = HALF_PI - phi;\r\n      break;\r\n    case this.S_POLE:\r\n      phi -= HALF_PI;\r\n      break;\r\n    }\r\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\r\n  }\r\n  else {\r\n    ab = 0;\r\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\r\n      x /= this.dd;\r\n      y *= this.dd;\r\n      rho = Math.sqrt(x * x + y * y);\r\n      if (rho < EPSLN) {\r\n        p.x = this.long0;\r\n        p.y = this.lat0;\r\n        return p;\r\n      }\r\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\r\n      cCe = Math.cos(sCe);\r\n      x *= (sCe = Math.sin(sCe));\r\n      if (this.mode === this.OBLIQ) {\r\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\r\n        q = this.qp * ab;\r\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\r\n      }\r\n      else {\r\n        ab = y * sCe / rho;\r\n        q = this.qp * ab;\r\n        y = rho * cCe;\r\n      }\r\n    }\r\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\r\n      if (this.mode === this.N_POLE) {\r\n        y = -y;\r\n      }\r\n      q = (x * x + y * y);\r\n      if (!q) {\r\n        p.x = this.long0;\r\n        p.y = this.lat0;\r\n        return p;\r\n      }\r\n      ab = 1 - q / this.qp;\r\n      if (this.mode === this.S_POLE) {\r\n        ab = -ab;\r\n      }\r\n    }\r\n    lam = Math.atan2(x, y);\r\n    phi = authlat(Math.asin(ab), this.apa);\r\n  }\r\n\r\n  p.x = adjust_lon(this.long0 + lam);\r\n  p.y = phi;\r\n  return p;\r\n}\r\n\r\n/* determine latitude from authalic latitude */\r\nvar P00 = 0.33333333333333333333;\r\n\r\nvar P01 = 0.17222222222222222222;\r\nvar P02 = 0.10257936507936507936;\r\nvar P10 = 0.06388888888888888888;\r\nvar P11 = 0.06640211640211640211;\r\nvar P20 = 0.01641501294219154443;\r\n\r\nfunction authset(es) {\r\n  var t;\r\n  var APA = [];\r\n  APA[0] = es * P00;\r\n  t = es * es;\r\n  APA[0] += t * P01;\r\n  APA[1] = t * P10;\r\n  t *= es;\r\n  APA[0] += t * P02;\r\n  APA[1] += t * P11;\r\n  APA[2] = t * P20;\r\n  return APA;\r\n}\r\n\r\nfunction authlat(beta, APA) {\r\n  var t = beta + beta;\r\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\r\n}\r\n\r\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names,\r\n  S_POLE: S_POLE,\r\n  N_POLE: N_POLE,\r\n  EQUIT: EQUIT,\r\n  OBLIQ: OBLIQ\r\n};\r\n", "export default function(x) {\r\n  if (Math.abs(x) > 1) {\r\n    x = (x > 1) ? 1 : -1;\r\n  }\r\n  return Math.asin(x);\r\n}", "import msfnz from '../common/msfnz';\r\nimport qsfnz from '../common/qsfnz';\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport asinz from '../common/asinz';\r\nimport {EPSLN} from '../constants/values';\r\n\r\nexport function init() {\r\n\r\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\r\n    return;\r\n  }\r\n  this.temp = this.b / this.a;\r\n  this.es = 1 - Math.pow(this.temp, 2);\r\n  this.e3 = Math.sqrt(this.es);\r\n\r\n  this.sin_po = Math.sin(this.lat1);\r\n  this.cos_po = Math.cos(this.lat1);\r\n  this.t1 = this.sin_po;\r\n  this.con = this.sin_po;\r\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\r\n  this.qs1 = qsfnz(this.e3, this.sin_po);\r\n\r\n  this.sin_po = Math.sin(this.lat2);\r\n  this.cos_po = Math.cos(this.lat2);\r\n  this.t2 = this.sin_po;\r\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\r\n  this.qs2 = qsfnz(this.e3, this.sin_po);\r\n\r\n  this.sin_po = Math.sin(this.lat0);\r\n  this.cos_po = Math.cos(this.lat0);\r\n  this.t3 = this.sin_po;\r\n  this.qs0 = qsfnz(this.e3, this.sin_po);\r\n\r\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\r\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\r\n  }\r\n  else {\r\n    this.ns0 = this.con;\r\n  }\r\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\r\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\r\n}\r\n\r\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\r\n  -------------------------------------------------------------------*/\r\nexport function forward(p) {\r\n\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  this.sin_phi = Math.sin(lat);\r\n  this.cos_phi = Math.cos(lat);\r\n\r\n  var qs = qsfnz(this.e3, this.sin_phi);\r\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\r\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\r\n  var x = rh1 * Math.sin(theta) + this.x0;\r\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\r\n\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var rh1, qs, con, theta, lon, lat;\r\n\r\n  p.x -= this.x0;\r\n  p.y = this.rh - p.y + this.y0;\r\n  if (this.ns0 >= 0) {\r\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\r\n    con = 1;\r\n  }\r\n  else {\r\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\r\n    con = -1;\r\n  }\r\n  theta = 0;\r\n  if (rh1 !== 0) {\r\n    theta = Math.atan2(con * p.x, con * p.y);\r\n  }\r\n  con = rh1 * this.ns0 / this.a;\r\n  if (this.sphere) {\r\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\r\n  }\r\n  else {\r\n    qs = (this.c - con * con) / this.ns0;\r\n    lat = this.phi1z(this.e3, qs);\r\n  }\r\n\r\n  lon = adjust_lon(theta / this.ns0 + this.long0);\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\n/* Function to compute phi1, the latitude for the inverse of the\r\n   Albers Conical Equal-Area projection.\r\n-------------------------------------------*/\r\nexport function phi1z(eccent, qs) {\r\n  var sinphi, cosphi, con, com, dphi;\r\n  var phi = asinz(0.5 * qs);\r\n  if (eccent < EPSLN) {\r\n    return phi;\r\n  }\r\n\r\n  var eccnts = eccent * eccent;\r\n  for (var i = 1; i <= 25; i++) {\r\n    sinphi = Math.sin(phi);\r\n    cosphi = Math.cos(phi);\r\n    con = eccent * sinphi;\r\n    com = 1 - con * con;\r\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\r\n    phi = phi + dphi;\r\n    if (Math.abs(dphi) <= 1e-7) {\r\n      return phi;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names,\r\n  phi1z: phi1z\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\nimport asinz from '../common/asinz';\r\nimport {EPSLN} from '../constants/values';\r\n\r\n/*\r\n  reference:\r\n    Wolfram Mathworld \"Gnomonic Projection\"\r\n    http://mathworld.wolfram.com/GnomonicProjection.html\r\n    Accessed: 12th November 2009\r\n  */\r\nexport function init() {\r\n\r\n  /* Place parameters in static storage for common use\r\n      -------------------------------------------------*/\r\n  this.sin_p14 = Math.sin(this.lat0);\r\n  this.cos_p14 = Math.cos(this.lat0);\r\n  // Approximation for projecting points to the horizon (infinity)\r\n  this.infinity_dist = 1000 * this.a;\r\n  this.rc = 1;\r\n}\r\n\r\n/* Gnomonic forward equations--mapping lat,long to x,y\r\n    ---------------------------------------------------*/\r\nexport function forward(p) {\r\n  var sinphi, cosphi; /* sin and cos value        */\r\n  var dlon; /* delta longitude value      */\r\n  var coslon; /* cos of longitude        */\r\n  var ksp; /* scale factor          */\r\n  var g;\r\n  var x, y;\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  /* Forward equations\r\n      -----------------*/\r\n  dlon = adjust_lon(lon - this.long0);\r\n\r\n  sinphi = Math.sin(lat);\r\n  cosphi = Math.cos(lat);\r\n\r\n  coslon = Math.cos(dlon);\r\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\r\n  ksp = 1;\r\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\r\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\r\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\r\n  }\r\n  else {\r\n\r\n    // Point is in the opposing hemisphere and is unprojectable\r\n    // We still need to return a reasonable point, so we project\r\n    // to infinity, on a bearing\r\n    // equivalent to the northern hemisphere equivalent\r\n    // This is a reasonable approximation for short shapes and lines that\r\n    // straddle the horizon.\r\n\r\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\r\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\r\n\r\n  }\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var rh; /* Rho */\r\n  var sinc, cosc;\r\n  var c;\r\n  var lon, lat;\r\n\r\n  /* Inverse equations\r\n      -----------------*/\r\n  p.x = (p.x - this.x0) / this.a;\r\n  p.y = (p.y - this.y0) / this.a;\r\n\r\n  p.x /= this.k0;\r\n  p.y /= this.k0;\r\n\r\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\r\n    c = Math.atan2(rh, this.rc);\r\n    sinc = Math.sin(c);\r\n    cosc = Math.cos(c);\r\n\r\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\r\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\r\n    lon = adjust_lon(this.long0 + lon);\r\n  }\r\n  else {\r\n    lat = this.phic0;\r\n    lon = 0;\r\n  }\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"gnom\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import {HALF_PI} from '../constants/values';\r\n\r\nexport default function(eccent, q) {\r\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\r\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\r\n    if (q < 0) {\r\n      return (-1 * HALF_PI);\r\n    }\r\n    else {\r\n      return HALF_PI;\r\n    }\r\n  }\r\n  //var phi = 0.5* q/(1-eccent*eccent);\r\n  var phi = Math.asin(0.5 * q);\r\n  var dphi;\r\n  var sin_phi;\r\n  var cos_phi;\r\n  var con;\r\n  for (var i = 0; i < 30; i++) {\r\n    sin_phi = Math.sin(phi);\r\n    cos_phi = Math.cos(phi);\r\n    con = eccent * sin_phi;\r\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\r\n    phi += dphi;\r\n    if (Math.abs(dphi) <= 0.0000000001) {\r\n      return phi;\r\n    }\r\n  }\r\n\r\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\r\n  return NaN;\r\n}\r\n", "import adjust_lon from '../common/adjust_lon';\r\nimport qsfnz from '../common/qsfnz';\r\nimport msfnz from '../common/msfnz';\r\nimport iqsfnz from '../common/iqsfnz';\r\n\r\n/*\r\n  reference:\r\n    \"Cartographic Projection Procedures for the UNIX Environment-\r\n    A User's Manual\" by Gerald I. Evenden,\r\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\r\n*/\r\nexport function init() {\r\n  //no-op\r\n  if (!this.sphere) {\r\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\r\n  }\r\n}\r\n\r\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\r\n    ------------------------------------------------------------*/\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  var x, y;\r\n  /* Forward equations\r\n      -----------------*/\r\n  var dlon = adjust_lon(lon - this.long0);\r\n  if (this.sphere) {\r\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\r\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\r\n  }\r\n  else {\r\n    var qs = qsfnz(this.e, Math.sin(lat));\r\n    x = this.x0 + this.a * this.k0 * dlon;\r\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\r\n  }\r\n\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\r\n    ------------------------------------------------------------*/\r\nexport function inverse(p) {\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  var lon, lat;\r\n\r\n  if (this.sphere) {\r\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\r\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\r\n  }\r\n  else {\r\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\r\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\r\n  }\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"cea\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\nimport adjust_lat from '../common/adjust_lat';\r\n\r\nexport function init() {\r\n\r\n  this.x0 = this.x0 || 0;\r\n  this.y0 = this.y0 || 0;\r\n  this.lat0 = this.lat0 || 0;\r\n  this.long0 = this.long0 || 0;\r\n  this.lat_ts = this.lat_ts || 0;\r\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\r\n\r\n  this.rc = Math.cos(this.lat_ts);\r\n}\r\n\r\n// forward equations--mapping lat,long to x,y\r\n// -----------------------------------------------------------------\r\nexport function forward(p) {\r\n\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  var dlon = adjust_lon(lon - this.long0);\r\n  var dlat = adjust_lat(lat - this.lat0);\r\n  p.x = this.x0 + (this.a * dlon * this.rc);\r\n  p.y = this.y0 + (this.a * dlat);\r\n  return p;\r\n}\r\n\r\n// inverse equations--mapping x,y to lat/long\r\n// -----------------------------------------------------------------\r\nexport function inverse(p) {\r\n\r\n  var x = p.x;\r\n  var y = p.y;\r\n\r\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\r\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import e0fn from '../common/e0fn';\r\nimport e1fn from '../common/e1fn';\r\nimport e2fn from '../common/e2fn';\r\nimport e3fn from '../common/e3fn';\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport adjust_lat from '../common/adjust_lat';\r\nimport mlfn from '../common/mlfn';\r\nimport {EPSLN} from '../constants/values';\r\n\r\nimport gN from '../common/gN';\r\nvar MAX_ITER = 20;\r\n\r\nexport function init() {\r\n  /* Place parameters in static storage for common use\r\n      -------------------------------------------------*/\r\n  this.temp = this.b / this.a;\r\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\r\n  this.e = Math.sqrt(this.es);\r\n  this.e0 = e0fn(this.es);\r\n  this.e1 = e1fn(this.es);\r\n  this.e2 = e2fn(this.es);\r\n  this.e3 = e3fn(this.es);\r\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\r\n}\r\n\r\n/* Polyconic forward equations--mapping lat,long to x,y\r\n    ---------------------------------------------------*/\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  var x, y, el;\r\n  var dlon = adjust_lon(lon - this.long0);\r\n  el = dlon * Math.sin(lat);\r\n  if (this.sphere) {\r\n    if (Math.abs(lat) <= EPSLN) {\r\n      x = this.a * dlon;\r\n      y = -1 * this.a * this.lat0;\r\n    }\r\n    else {\r\n      x = this.a * Math.sin(el) / Math.tan(lat);\r\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\r\n    }\r\n  }\r\n  else {\r\n    if (Math.abs(lat) <= EPSLN) {\r\n      x = this.a * dlon;\r\n      y = -1 * this.ml0;\r\n    }\r\n    else {\r\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\r\n      x = nl * Math.sin(el);\r\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\r\n    }\r\n\r\n  }\r\n  p.x = x + this.x0;\r\n  p.y = y + this.y0;\r\n  return p;\r\n}\r\n\r\n/* Inverse equations\r\n  -----------------*/\r\nexport function inverse(p) {\r\n  var lon, lat, x, y, i;\r\n  var al, bl;\r\n  var phi, dphi;\r\n  x = p.x - this.x0;\r\n  y = p.y - this.y0;\r\n\r\n  if (this.sphere) {\r\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\r\n      lon = adjust_lon(x / this.a + this.long0);\r\n      lat = 0;\r\n    }\r\n    else {\r\n      al = this.lat0 + y / this.a;\r\n      bl = x * x / this.a / this.a + al * al;\r\n      phi = al;\r\n      var tanphi;\r\n      for (i = MAX_ITER; i; --i) {\r\n        tanphi = Math.tan(phi);\r\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\r\n        phi += dphi;\r\n        if (Math.abs(dphi) <= EPSLN) {\r\n          lat = phi;\r\n          break;\r\n        }\r\n      }\r\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\r\n    }\r\n  }\r\n  else {\r\n    if (Math.abs(y + this.ml0) <= EPSLN) {\r\n      lat = 0;\r\n      lon = adjust_lon(this.long0 + x / this.a);\r\n    }\r\n    else {\r\n\r\n      al = (this.ml0 + y) / this.a;\r\n      bl = x * x / this.a / this.a + al * al;\r\n      phi = al;\r\n      var cl, mln, mlnp, ma;\r\n      var con;\r\n      for (i = MAX_ITER; i; --i) {\r\n        con = this.e * Math.sin(phi);\r\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\r\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\r\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\r\n        ma = mln / this.a;\r\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\r\n        phi -= dphi;\r\n        if (Math.abs(dphi) <= EPSLN) {\r\n          lat = phi;\r\n          break;\r\n        }\r\n      }\r\n\r\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\r\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\r\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\r\n    }\r\n  }\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Polyconic\", \"poly\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import {SEC_TO_RAD} from '../constants/values';\r\n\r\n/*\r\n  reference\r\n    Department of Land and Survey Technical Circular 1973/32\r\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\r\n    OSG Technical Report 4.1\r\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\r\n  */\r\n\r\n/**\r\n * iterations: Number of iterations to refine inverse transform.\r\n *     0 -> km accuracy\r\n *     1 -> m accuracy -- suitable for most mapping applications\r\n *     2 -> mm accuracy\r\n */\r\nexport var iterations = 1;\r\n\r\nexport function init() {\r\n  this.A = [];\r\n  this.A[1] = 0.6399175073;\r\n  this.A[2] = -0.1358797613;\r\n  this.A[3] = 0.063294409;\r\n  this.A[4] = -0.02526853;\r\n  this.A[5] = 0.0117879;\r\n  this.A[6] = -0.0055161;\r\n  this.A[7] = 0.0026906;\r\n  this.A[8] = -0.001333;\r\n  this.A[9] = 0.00067;\r\n  this.A[10] = -0.00034;\r\n\r\n  this.B_re = [];\r\n  this.B_im = [];\r\n  this.B_re[1] = 0.7557853228;\r\n  this.B_im[1] = 0;\r\n  this.B_re[2] = 0.249204646;\r\n  this.B_im[2] = 0.003371507;\r\n  this.B_re[3] = -0.001541739;\r\n  this.B_im[3] = 0.041058560;\r\n  this.B_re[4] = -0.10162907;\r\n  this.B_im[4] = 0.01727609;\r\n  this.B_re[5] = -0.26623489;\r\n  this.B_im[5] = -0.36249218;\r\n  this.B_re[6] = -0.6870983;\r\n  this.B_im[6] = -1.1651967;\r\n\r\n  this.C_re = [];\r\n  this.C_im = [];\r\n  this.C_re[1] = 1.3231270439;\r\n  this.C_im[1] = 0;\r\n  this.C_re[2] = -0.577245789;\r\n  this.C_im[2] = -0.007809598;\r\n  this.C_re[3] = 0.508307513;\r\n  this.C_im[3] = -0.112208952;\r\n  this.C_re[4] = -0.15094762;\r\n  this.C_im[4] = 0.18200602;\r\n  this.C_re[5] = 1.01418179;\r\n  this.C_im[5] = 1.64497696;\r\n  this.C_re[6] = 1.9660549;\r\n  this.C_im[6] = 2.5127645;\r\n\r\n  this.D = [];\r\n  this.D[1] = 1.5627014243;\r\n  this.D[2] = 0.5185406398;\r\n  this.D[3] = -0.03333098;\r\n  this.D[4] = -0.1052906;\r\n  this.D[5] = -0.0368594;\r\n  this.D[6] = 0.007317;\r\n  this.D[7] = 0.01220;\r\n  this.D[8] = 0.00394;\r\n  this.D[9] = -0.0013;\r\n}\r\n\r\n/**\r\n    New Zealand Map Grid Forward  - long/lat to x/y\r\n    long/lat in radians\r\n  */\r\nexport function forward(p) {\r\n  var n;\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  var delta_lat = lat - this.lat0;\r\n  var delta_lon = lon - this.long0;\r\n\r\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\r\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\r\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\r\n  var d_lambda = delta_lon;\r\n  var d_phi_n = 1; // d_phi^0\r\n\r\n  var d_psi = 0;\r\n  for (n = 1; n <= 10; n++) {\r\n    d_phi_n = d_phi_n * d_phi;\r\n    d_psi = d_psi + this.A[n] * d_phi_n;\r\n  }\r\n\r\n  // 2. Calculate theta\r\n  var th_re = d_psi;\r\n  var th_im = d_lambda;\r\n\r\n  // 3. Calculate z\r\n  var th_n_re = 1;\r\n  var th_n_im = 0; // theta^0\r\n  var th_n_re1;\r\n  var th_n_im1;\r\n\r\n  var z_re = 0;\r\n  var z_im = 0;\r\n  for (n = 1; n <= 6; n++) {\r\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\r\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\r\n    th_n_re = th_n_re1;\r\n    th_n_im = th_n_im1;\r\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\r\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\r\n  }\r\n\r\n  // 4. Calculate easting and northing\r\n  p.x = (z_im * this.a) + this.x0;\r\n  p.y = (z_re * this.a) + this.y0;\r\n\r\n  return p;\r\n}\r\n\r\n/**\r\n    New Zealand Map Grid Inverse  -  x/y to long/lat\r\n  */\r\nexport function inverse(p) {\r\n  var n;\r\n  var x = p.x;\r\n  var y = p.y;\r\n\r\n  var delta_x = x - this.x0;\r\n  var delta_y = y - this.y0;\r\n\r\n  // 1. Calculate z\r\n  var z_re = delta_y / this.a;\r\n  var z_im = delta_x / this.a;\r\n\r\n  // 2a. Calculate theta - first approximation gives km accuracy\r\n  var z_n_re = 1;\r\n  var z_n_im = 0; // z^0\r\n  var z_n_re1;\r\n  var z_n_im1;\r\n\r\n  var th_re = 0;\r\n  var th_im = 0;\r\n  for (n = 1; n <= 6; n++) {\r\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\r\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\r\n    z_n_re = z_n_re1;\r\n    z_n_im = z_n_im1;\r\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\r\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\r\n  }\r\n\r\n  // 2b. Iterate to refine the accuracy of the calculation\r\n  //        0 iterations gives km accuracy\r\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\r\n  //        2 iterations bives mm accuracy\r\n  for (var i = 0; i < this.iterations; i++) {\r\n    var th_n_re = th_re;\r\n    var th_n_im = th_im;\r\n    var th_n_re1;\r\n    var th_n_im1;\r\n\r\n    var num_re = z_re;\r\n    var num_im = z_im;\r\n    for (n = 2; n <= 6; n++) {\r\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\r\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\r\n      th_n_re = th_n_re1;\r\n      th_n_im = th_n_im1;\r\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\r\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\r\n    }\r\n\r\n    th_n_re = 1;\r\n    th_n_im = 0;\r\n    var den_re = this.B_re[1];\r\n    var den_im = this.B_im[1];\r\n    for (n = 2; n <= 6; n++) {\r\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\r\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\r\n      th_n_re = th_n_re1;\r\n      th_n_im = th_n_im1;\r\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\r\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\r\n    }\r\n\r\n    // Complex division\r\n    var den2 = den_re * den_re + den_im * den_im;\r\n    th_re = (num_re * den_re + num_im * den_im) / den2;\r\n    th_im = (num_im * den_re - num_re * den_im) / den2;\r\n  }\r\n\r\n  // 3. Calculate d_phi              ...                                    // and d_lambda\r\n  var d_psi = th_re;\r\n  var d_lambda = th_im;\r\n  var d_psi_n = 1; // d_psi^0\r\n\r\n  var d_phi = 0;\r\n  for (n = 1; n <= 9; n++) {\r\n    d_psi_n = d_psi_n * d_psi;\r\n    d_phi = d_phi + this.D[n] * d_psi_n;\r\n  }\r\n\r\n  // 4. Calculate latitude and longitude\r\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\r\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\r\n  var lon = this.long0 + d_lambda;\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n\r\n  return p;\r\n}\r\n\r\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\n\r\n/*\r\n  reference\r\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\r\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\r\n  */\r\n\r\n\r\n/* Initialize the Miller Cylindrical projection\r\n  -------------------------------------------*/\r\nexport function init() {\r\n  //no-op\r\n}\r\n\r\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\r\n    ------------------------------------------------------------*/\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  /* Forward equations\r\n      -----------------*/\r\n  var dlon = adjust_lon(lon - this.long0);\r\n  var x = this.x0 + this.a * dlon;\r\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\r\n\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\r\n    ------------------------------------------------------------*/\r\nexport function inverse(p) {\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n\r\n  var lon = adjust_lon(this.long0 + p.x / this.a);\r\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\nimport adjust_lat from '../common/adjust_lat';\r\nimport pj_enfn from '../common/pj_enfn';\r\nvar MAX_ITER = 20;\r\nimport pj_mlfn from '../common/pj_mlfn';\r\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\r\nimport {EPSLN, HALF_PI} from '../constants/values';\r\n\r\nimport asinz from '../common/asinz';\r\n\r\n\r\nexport function init() {\r\n  /* Place parameters in static storage for common use\r\n    -------------------------------------------------*/\r\n\r\n\r\n  if (!this.sphere) {\r\n    this.en = pj_enfn(this.es);\r\n  }\r\n  else {\r\n    this.n = 1;\r\n    this.m = 0;\r\n    this.es = 0;\r\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\r\n    this.C_x = this.C_y / (this.m + 1);\r\n  }\r\n\r\n}\r\n\r\n/* Sinusoidal forward equations--mapping lat,long to x,y\r\n  -----------------------------------------------------*/\r\nexport function forward(p) {\r\n  var x, y;\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  /* Forward equations\r\n    -----------------*/\r\n  lon = adjust_lon(lon - this.long0);\r\n\r\n  if (this.sphere) {\r\n    if (!this.m) {\r\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\r\n    }\r\n    else {\r\n      var k = this.n * Math.sin(lat);\r\n      for (var i = MAX_ITER; i; --i) {\r\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\r\n        lat -= V;\r\n        if (Math.abs(V) < EPSLN) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\r\n    y = this.a * this.C_y * lat;\r\n\r\n  }\r\n  else {\r\n\r\n    var s = Math.sin(lat);\r\n    var c = Math.cos(lat);\r\n    y = this.a * pj_mlfn(lat, s, c, this.en);\r\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\r\n  }\r\n\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var lat, temp, lon, s;\r\n\r\n  p.x -= this.x0;\r\n  lon = p.x / this.a;\r\n  p.y -= this.y0;\r\n  lat = p.y / this.a;\r\n\r\n  if (this.sphere) {\r\n    lat /= this.C_y;\r\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\r\n    if (this.m) {\r\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\r\n    }\r\n    else if (this.n !== 1) {\r\n      lat = asinz(Math.sin(lat) / this.n);\r\n    }\r\n    lon = adjust_lon(lon + this.long0);\r\n    lat = adjust_lat(lat);\r\n  }\r\n  else {\r\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\r\n    s = Math.abs(lat);\r\n    if (s < HALF_PI) {\r\n      s = Math.sin(lat);\r\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\r\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\r\n      lon = adjust_lon(temp);\r\n    }\r\n    else if ((s - EPSLN) < HALF_PI) {\r\n      lon = this.long0;\r\n    }\r\n  }\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Sinusoidal\", \"sinu\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\nexport function init() {}\r\nimport {EPSLN} from '../constants/values';\r\n/* Mollweide forward equations--mapping lat,long to x,y\r\n    ----------------------------------------------------*/\r\nexport function forward(p) {\r\n\r\n  /* Forward equations\r\n      -----------------*/\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  var delta_lon = adjust_lon(lon - this.long0);\r\n  var theta = lat;\r\n  var con = Math.PI * Math.sin(lat);\r\n\r\n  /* Iterate using the Newton-Raphson method to find theta\r\n      -----------------------------------------------------*/\r\n  while (true) {\r\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\r\n    theta += delta_theta;\r\n    if (Math.abs(delta_theta) < EPSLN) {\r\n      break;\r\n    }\r\n  }\r\n  theta /= 2;\r\n\r\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\r\n       this is done here because of precision problems with \"cos(theta)\"\r\n       --------------------------------------------------------------------------*/\r\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\r\n    delta_lon = 0;\r\n  }\r\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\r\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\r\n\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var theta;\r\n  var arg;\r\n\r\n  /* Inverse equations\r\n      -----------------*/\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  arg = p.y / (1.4142135623731 * this.a);\r\n\r\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\r\n       a number very close to one is used instead.\r\n       -------------------------------------------------------------------*/\r\n  if (Math.abs(arg) > 0.999999999999) {\r\n    arg = 0.999999999999;\r\n  }\r\n  theta = Math.asin(arg);\r\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\r\n  if (lon < (-Math.PI)) {\r\n    lon = -Math.PI;\r\n  }\r\n  if (lon > Math.PI) {\r\n    lon = Math.PI;\r\n  }\r\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\r\n  if (Math.abs(arg) > 1) {\r\n    arg = 1;\r\n  }\r\n  var lat = Math.asin(arg);\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Mollweide\", \"moll\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import e0fn from '../common/e0fn';\r\nimport e1fn from '../common/e1fn';\r\nimport e2fn from '../common/e2fn';\r\nimport e3fn from '../common/e3fn';\r\nimport msfnz from '../common/msfnz';\r\nimport mlfn from '../common/mlfn';\r\nimport adjust_lon from '../common/adjust_lon';\r\nimport adjust_lat from '../common/adjust_lat';\r\nimport imlfn from '../common/imlfn';\r\nimport {EPSLN} from '../constants/values';\r\n\r\nexport function init() {\r\n\r\n  /* Place parameters in static storage for common use\r\n      -------------------------------------------------*/\r\n  // Standard Parallels cannot be equal and on opposite sides of the equator\r\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\r\n    return;\r\n  }\r\n  this.lat2 = this.lat2 || this.lat1;\r\n  this.temp = this.b / this.a;\r\n  this.es = 1 - Math.pow(this.temp, 2);\r\n  this.e = Math.sqrt(this.es);\r\n  this.e0 = e0fn(this.es);\r\n  this.e1 = e1fn(this.es);\r\n  this.e2 = e2fn(this.es);\r\n  this.e3 = e3fn(this.es);\r\n\r\n  this.sinphi = Math.sin(this.lat1);\r\n  this.cosphi = Math.cos(this.lat1);\r\n\r\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\r\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\r\n\r\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\r\n    this.ns = this.sinphi;\r\n  }\r\n  else {\r\n    this.sinphi = Math.sin(this.lat2);\r\n    this.cosphi = Math.cos(this.lat2);\r\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\r\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\r\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\r\n  }\r\n  this.g = this.ml1 + this.ms1 / this.ns;\r\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\r\n  this.rh = this.a * (this.g - this.ml0);\r\n}\r\n\r\n/* Equidistant Conic forward equations--mapping lat,long to x,y\r\n  -----------------------------------------------------------*/\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  var rh1;\r\n\r\n  /* Forward equations\r\n      -----------------*/\r\n  if (this.sphere) {\r\n    rh1 = this.a * (this.g - lat);\r\n  }\r\n  else {\r\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\r\n    rh1 = this.a * (this.g - ml);\r\n  }\r\n  var theta = this.ns * adjust_lon(lon - this.long0);\r\n  var x = this.x0 + rh1 * Math.sin(theta);\r\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\n/* Inverse equations\r\n  -----------------*/\r\nexport function inverse(p) {\r\n  p.x -= this.x0;\r\n  p.y = this.rh - p.y + this.y0;\r\n  var con, rh1, lat, lon;\r\n  if (this.ns >= 0) {\r\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\r\n    con = 1;\r\n  }\r\n  else {\r\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\r\n    con = -1;\r\n  }\r\n  var theta = 0;\r\n  if (rh1 !== 0) {\r\n    theta = Math.atan2(con * p.x, con * p.y);\r\n  }\r\n\r\n  if (this.sphere) {\r\n    lon = adjust_lon(this.long0 + theta / this.ns);\r\n    lat = adjust_lat(this.g - rh1 / this.a);\r\n    p.x = lon;\r\n    p.y = lat;\r\n    return p;\r\n  }\r\n  else {\r\n    var ml = this.g - rh1 / this.a;\r\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\r\n    lon = adjust_lon(this.long0 + theta / this.ns);\r\n    p.x = lon;\r\n    p.y = lat;\r\n    return p;\r\n  }\r\n\r\n}\r\n\r\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\n\r\nimport {HALF_PI, EPSLN} from '../constants/values';\r\n\r\nimport asinz from '../common/asinz';\r\n\r\n/* Initialize the Van Der Grinten projection\r\n  ----------------------------------------*/\r\nexport function init() {\r\n  //this.R = 6370997; //Radius of earth\r\n  this.R = this.a;\r\n}\r\n\r\nexport function forward(p) {\r\n\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n\r\n  /* Forward equations\r\n    -----------------*/\r\n  var dlon = adjust_lon(lon - this.long0);\r\n  var x, y;\r\n\r\n  if (Math.abs(lat) <= EPSLN) {\r\n    x = this.x0 + this.R * dlon;\r\n    y = this.y0;\r\n  }\r\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\r\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\r\n    x = this.x0;\r\n    if (lat >= 0) {\r\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\r\n    }\r\n    else {\r\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\r\n    }\r\n    //  return(OK);\r\n  }\r\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\r\n  var asq = al * al;\r\n  var sinth = Math.sin(theta);\r\n  var costh = Math.cos(theta);\r\n\r\n  var g = costh / (sinth + costh - 1);\r\n  var gsq = g * g;\r\n  var m = g * (2 / sinth - 1);\r\n  var msq = m * m;\r\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\r\n  if (dlon < 0) {\r\n    con = -con;\r\n  }\r\n  x = this.x0 + con;\r\n  //con = Math.abs(con / (Math.PI * this.R));\r\n  var q = asq + g;\r\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\r\n  if (lat >= 0) {\r\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\r\n    y = this.y0 + con;\r\n  }\r\n  else {\r\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\r\n    y = this.y0 - con;\r\n  }\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\r\n  ---------------------------------------------------------*/\r\nexport function inverse(p) {\r\n  var lon, lat;\r\n  var xx, yy, xys, c1, c2, c3;\r\n  var a1;\r\n  var m1;\r\n  var con;\r\n  var th1;\r\n  var d;\r\n\r\n  /* inverse equations\r\n    -----------------*/\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  con = Math.PI * this.R;\r\n  xx = p.x / con;\r\n  yy = p.y / con;\r\n  xys = xx * xx + yy * yy;\r\n  c1 = -Math.abs(yy) * (1 + xys);\r\n  c2 = c1 - 2 * yy * yy + xx * xx;\r\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\r\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\r\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\r\n  m1 = 2 * Math.sqrt(-a1 / 3);\r\n  con = ((3 * d) / a1) / m1;\r\n  if (Math.abs(con) > 1) {\r\n    if (con >= 0) {\r\n      con = 1;\r\n    }\r\n    else {\r\n      con = -1;\r\n    }\r\n  }\r\n  th1 = Math.acos(con) / 3;\r\n  if (p.y >= 0) {\r\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\r\n  }\r\n  else {\r\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\r\n  }\r\n\r\n  if (Math.abs(xx) < EPSLN) {\r\n    lon = this.long0;\r\n  }\r\n  else {\r\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\r\n  }\r\n\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\nimport {HALF_PI, EPSLN} from '../constants/values';\r\n\r\nimport mlfn from '../common/mlfn';\r\nimport e0fn from '../common/e0fn';\r\nimport e1fn from '../common/e1fn';\r\nimport e2fn from '../common/e2fn';\r\nimport e3fn from '../common/e3fn';\r\nimport gN from '../common/gN';\r\nimport asinz from '../common/asinz';\r\nimport imlfn from '../common/imlfn';\r\n\r\n\r\n\r\nexport function init() {\r\n  this.sin_p12 = Math.sin(this.lat0);\r\n  this.cos_p12 = Math.cos(this.lat0);\r\n}\r\n\r\nexport function forward(p) {\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  var sinphi = Math.sin(p.y);\r\n  var cosphi = Math.cos(p.y);\r\n  var dlon = adjust_lon(lon - this.long0);\r\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\r\n  if (this.sphere) {\r\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\r\n      //North Pole case\r\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\r\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\r\n      return p;\r\n    }\r\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\r\n      //South Pole case\r\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\r\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\r\n      return p;\r\n    }\r\n    else {\r\n      //default case\r\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\r\n      c = Math.acos(cos_c);\r\n      kp = c ? c / Math.sin(c) : 1;\r\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\r\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\r\n      return p;\r\n    }\r\n  }\r\n  else {\r\n    e0 = e0fn(this.es);\r\n    e1 = e1fn(this.es);\r\n    e2 = e2fn(this.es);\r\n    e3 = e3fn(this.es);\r\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\r\n      //North Pole case\r\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\r\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\r\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\r\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\r\n      return p;\r\n    }\r\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\r\n      //South Pole case\r\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\r\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\r\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\r\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\r\n      return p;\r\n    }\r\n    else {\r\n      //Default case\r\n      tanphi = sinphi / cosphi;\r\n      Nl1 = gN(this.a, this.e, this.sin_p12);\r\n      Nl = gN(this.a, this.e, sinphi);\r\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\r\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\r\n      if (Az === 0) {\r\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\r\n      }\r\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\r\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\r\n      }\r\n      else {\r\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\r\n      }\r\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\r\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\r\n      GH = G * H;\r\n      Hs = H * H;\r\n      s2 = s * s;\r\n      s3 = s2 * s;\r\n      s4 = s3 * s;\r\n      s5 = s4 * s;\r\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\r\n      p.x = this.x0 + c * Math.sin(Az);\r\n      p.y = this.y0 + c * Math.cos(Az);\r\n      return p;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nexport function inverse(p) {\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\r\n  if (this.sphere) {\r\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\r\n    if (rh > (2 * HALF_PI * this.a)) {\r\n      return;\r\n    }\r\n    z = rh / this.a;\r\n\r\n    sinz = Math.sin(z);\r\n    cosz = Math.cos(z);\r\n\r\n    lon = this.long0;\r\n    if (Math.abs(rh) <= EPSLN) {\r\n      lat = this.lat0;\r\n    }\r\n    else {\r\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\r\n      con = Math.abs(this.lat0) - HALF_PI;\r\n      if (Math.abs(con) <= EPSLN) {\r\n        if (this.lat0 >= 0) {\r\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\r\n        }\r\n        else {\r\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\r\n        }\r\n      }\r\n      else {\r\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\r\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\r\n          //no-op, just keep the lon value as is\r\n        } else {\r\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\r\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\r\n        }*/\r\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\r\n      }\r\n    }\r\n\r\n    p.x = lon;\r\n    p.y = lat;\r\n    return p;\r\n  }\r\n  else {\r\n    e0 = e0fn(this.es);\r\n    e1 = e1fn(this.es);\r\n    e2 = e2fn(this.es);\r\n    e3 = e3fn(this.es);\r\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\r\n      //North pole case\r\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\r\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\r\n      M = Mlp - rh;\r\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\r\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\r\n      p.x = lon;\r\n      p.y = lat;\r\n      return p;\r\n    }\r\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\r\n      //South pole case\r\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\r\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\r\n      M = rh - Mlp;\r\n\r\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\r\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\r\n      p.x = lon;\r\n      p.y = lat;\r\n      return p;\r\n    }\r\n    else {\r\n      //default case\r\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\r\n      Az = Math.atan2(p.x, p.y);\r\n      N1 = gN(this.a, this.e, this.sin_p12);\r\n      cosAz = Math.cos(Az);\r\n      tmp = this.e * this.cos_p12 * cosAz;\r\n      A = -tmp * tmp / (1 - this.es);\r\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\r\n      D = rh / N1;\r\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\r\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\r\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\r\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\r\n      sinpsi = Math.sin(psi);\r\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\r\n      p.x = lon;\r\n      p.y = lat;\r\n      return p;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import adjust_lon from '../common/adjust_lon';\r\nimport asinz from '../common/asinz';\r\nimport {EPSLN, HALF_PI} from '../constants/values';\r\n\r\nexport function init() {\r\n  //double temp;      /* temporary variable    */\r\n\r\n  /* Place parameters in static storage for common use\r\n      -------------------------------------------------*/\r\n  this.sin_p14 = Math.sin(this.lat0);\r\n  this.cos_p14 = Math.cos(this.lat0);\r\n}\r\n\r\n/* Orthographic forward equations--mapping lat,long to x,y\r\n    ---------------------------------------------------*/\r\nexport function forward(p) {\r\n  var sinphi, cosphi; /* sin and cos value        */\r\n  var dlon; /* delta longitude value      */\r\n  var coslon; /* cos of longitude        */\r\n  var ksp; /* scale factor          */\r\n  var g, x, y;\r\n  var lon = p.x;\r\n  var lat = p.y;\r\n  /* Forward equations\r\n      -----------------*/\r\n  dlon = adjust_lon(lon - this.long0);\r\n\r\n  sinphi = Math.sin(lat);\r\n  cosphi = Math.cos(lat);\r\n\r\n  coslon = Math.cos(dlon);\r\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\r\n  ksp = 1;\r\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\r\n    x = this.a * ksp * cosphi * Math.sin(dlon);\r\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\r\n  }\r\n  p.x = x;\r\n  p.y = y;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  var rh; /* height above ellipsoid      */\r\n  var z; /* angle          */\r\n  var sinz, cosz; /* sin of z and cos of z      */\r\n  var con;\r\n  var lon, lat;\r\n  /* Inverse equations\r\n      -----------------*/\r\n  p.x -= this.x0;\r\n  p.y -= this.y0;\r\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\r\n  z = asinz(rh / this.a);\r\n\r\n  sinz = Math.sin(z);\r\n  cosz = Math.cos(z);\r\n\r\n  lon = this.long0;\r\n  if (Math.abs(rh) <= EPSLN) {\r\n    lat = this.lat0;\r\n    p.x = lon;\r\n    p.y = lat;\r\n    return p;\r\n  }\r\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\r\n  con = Math.abs(this.lat0) - HALF_PI;\r\n  if (Math.abs(con) <= EPSLN) {\r\n    if (this.lat0 >= 0) {\r\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\r\n    }\r\n    else {\r\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\r\n    }\r\n    p.x = lon;\r\n    p.y = lat;\r\n    return p;\r\n  }\r\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\r\n  p.x = lon;\r\n  p.y = lat;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"ortho\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "// QSC projection rewritten from the original PROJ4\r\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\r\n\r\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\r\n\r\n/* constants */\r\nvar FACE_ENUM = {\r\n    FRONT: 1,\r\n    RIGHT: 2,\r\n    BACK: 3,\r\n    LEFT: 4,\r\n    TOP: 5,\r\n    BOTTOM: 6\r\n};\r\n\r\nvar AREA_ENUM = {\r\n    AREA_0: 1,\r\n    AREA_1: 2,\r\n    AREA_2: 3,\r\n    AREA_3: 4\r\n};\r\n\r\nexport function init() {\r\n\r\n  this.x0 = this.x0 || 0;\r\n  this.y0 = this.y0 || 0;\r\n  this.lat0 = this.lat0 || 0;\r\n  this.long0 = this.long0 || 0;\r\n  this.lat_ts = this.lat_ts || 0;\r\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\r\n\r\n  /* Determine the cube face from the center of projection. */\r\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\r\n    this.face = FACE_ENUM.TOP;\r\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\r\n    this.face = FACE_ENUM.BOTTOM;\r\n  } else if (Math.abs(this.long0) <= FORTPI) {\r\n    this.face = FACE_ENUM.FRONT;\r\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\r\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\r\n  } else {\r\n    this.face = FACE_ENUM.BACK;\r\n  }\r\n\r\n  /* Fill in useful values for the ellipsoid <-> sphere shift\r\n   * described in [LK12]. */\r\n  if (this.es !== 0) {\r\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\r\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\r\n  }\r\n}\r\n\r\n// QSC forward equations--mapping lat,long to x,y\r\n// -----------------------------------------------------------------\r\nexport function forward(p) {\r\n  var xy = {x: 0, y: 0};\r\n  var lat, lon;\r\n  var theta, phi;\r\n  var t, mu;\r\n  /* nu; */\r\n  var area = {value: 0};\r\n\r\n  // move lon according to projection's lon\r\n  p.x -= this.long0;\r\n\r\n  /* Convert the geodetic latitude to a geocentric latitude.\r\n   * This corresponds to the shift from the ellipsoid to the sphere\r\n   * described in [LK12]. */\r\n  if (this.es !== 0) {//if (P->es != 0) {\r\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\r\n  } else {\r\n    lat = p.y;\r\n  }\r\n\r\n  /* Convert the input lat, lon into theta, phi as used by QSC.\r\n   * This depends on the cube face and the area on it.\r\n   * For the top and bottom face, we can compute theta and phi\r\n   * directly from phi, lam. For the other faces, we must use\r\n   * unit sphere cartesian coordinates as an intermediate step. */\r\n  lon = p.x; //lon = lp.lam;\r\n  if (this.face === FACE_ENUM.TOP) {\r\n    phi = HALF_PI - lat;\r\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\r\n      area.value = AREA_ENUM.AREA_0;\r\n      theta = lon - HALF_PI;\r\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\r\n      area.value = AREA_ENUM.AREA_1;\r\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\r\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\r\n      area.value = AREA_ENUM.AREA_2;\r\n      theta = lon + HALF_PI;\r\n    } else {\r\n      area.value = AREA_ENUM.AREA_3;\r\n      theta = lon;\r\n    }\r\n  } else if (this.face === FACE_ENUM.BOTTOM) {\r\n    phi = HALF_PI + lat;\r\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\r\n      area.value = AREA_ENUM.AREA_0;\r\n      theta = -lon + HALF_PI;\r\n    } else if (lon < FORTPI && lon >= -FORTPI) {\r\n      area.value = AREA_ENUM.AREA_1;\r\n      theta = -lon;\r\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\r\n      area.value = AREA_ENUM.AREA_2;\r\n      theta = -lon - HALF_PI;\r\n    } else {\r\n      area.value = AREA_ENUM.AREA_3;\r\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\r\n    }\r\n  } else {\r\n    var q, r, s;\r\n    var sinlat, coslat;\r\n    var sinlon, coslon;\r\n\r\n    if (this.face === FACE_ENUM.RIGHT) {\r\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\r\n    } else if (this.face === FACE_ENUM.BACK) {\r\n      lon = qsc_shift_lon_origin(lon, +SPI);\r\n    } else if (this.face === FACE_ENUM.LEFT) {\r\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\r\n    }\r\n    sinlat = Math.sin(lat);\r\n    coslat = Math.cos(lat);\r\n    sinlon = Math.sin(lon);\r\n    coslon = Math.cos(lon);\r\n    q = coslat * coslon;\r\n    r = coslat * sinlon;\r\n    s = sinlat;\r\n\r\n    if (this.face === FACE_ENUM.FRONT) {\r\n      phi = Math.acos(q);\r\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\r\n    } else if (this.face === FACE_ENUM.RIGHT) {\r\n      phi = Math.acos(r);\r\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\r\n    } else if (this.face === FACE_ENUM.BACK) {\r\n      phi = Math.acos(-q);\r\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\r\n    } else if (this.face === FACE_ENUM.LEFT) {\r\n      phi = Math.acos(-r);\r\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\r\n    } else {\r\n      /* Impossible */\r\n      phi = theta = 0;\r\n      area.value = AREA_ENUM.AREA_0;\r\n    }\r\n  }\r\n\r\n  /* Compute mu and nu for the area of definition.\r\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\r\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\r\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\r\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\r\n\r\n  /* Apply the result to the real area. */\r\n  if (area.value === AREA_ENUM.AREA_1) {\r\n    mu += HALF_PI;\r\n  } else if (area.value === AREA_ENUM.AREA_2) {\r\n    mu += SPI;\r\n  } else if (area.value === AREA_ENUM.AREA_3) {\r\n    mu += 1.5 * SPI;\r\n  }\r\n\r\n  /* Now compute x, y from mu and nu */\r\n  xy.x = t * Math.cos(mu);\r\n  xy.y = t * Math.sin(mu);\r\n  xy.x = xy.x * this.a + this.x0;\r\n  xy.y = xy.y * this.a + this.y0;\r\n\r\n  p.x = xy.x;\r\n  p.y = xy.y;\r\n  return p;\r\n}\r\n\r\n// QSC inverse equations--mapping x,y to lat/long\r\n// -----------------------------------------------------------------\r\nexport function inverse(p) {\r\n  var lp = {lam: 0, phi: 0};\r\n  var mu, nu, cosmu, tannu;\r\n  var tantheta, theta, cosphi, phi;\r\n  var t;\r\n  var area = {value: 0};\r\n\r\n  /* de-offset */\r\n  p.x = (p.x - this.x0) / this.a;\r\n  p.y = (p.y - this.y0) / this.a;\r\n\r\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\r\n   * This depends on the area of the cube face. */\r\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\r\n  mu = Math.atan2(p.y, p.x);\r\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\r\n    area.value = AREA_ENUM.AREA_0;\r\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\r\n    area.value = AREA_ENUM.AREA_1;\r\n    mu -= HALF_PI;\r\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\r\n    area.value = AREA_ENUM.AREA_2;\r\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\r\n  } else {\r\n    area.value = AREA_ENUM.AREA_3;\r\n    mu += HALF_PI;\r\n  }\r\n\r\n  /* Compute phi and theta for the area of definition.\r\n   * The inverse projection is not described in the original paper, but some\r\n   * good hints can be found here (as of 2011-12-14):\r\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\r\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\r\n  t = (SPI / 12) * Math.tan(mu);\r\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\r\n  theta = Math.atan(tantheta);\r\n  cosmu = Math.cos(mu);\r\n  tannu = Math.tan(nu);\r\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\r\n  if (cosphi < -1) {\r\n    cosphi = -1;\r\n  } else if (cosphi > +1) {\r\n    cosphi = +1;\r\n  }\r\n\r\n  /* Apply the result to the real area on the cube face.\r\n   * For the top and bottom face, we can compute phi and lam directly.\r\n   * For the other faces, we must use unit sphere cartesian coordinates\r\n   * as an intermediate step. */\r\n  if (this.face === FACE_ENUM.TOP) {\r\n    phi = Math.acos(cosphi);\r\n    lp.phi = HALF_PI - phi;\r\n    if (area.value === AREA_ENUM.AREA_0) {\r\n      lp.lam = theta + HALF_PI;\r\n    } else if (area.value === AREA_ENUM.AREA_1) {\r\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\r\n    } else if (area.value === AREA_ENUM.AREA_2) {\r\n      lp.lam = theta - HALF_PI;\r\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\r\n      lp.lam = theta;\r\n    }\r\n  } else if (this.face === FACE_ENUM.BOTTOM) {\r\n    phi = Math.acos(cosphi);\r\n    lp.phi = phi - HALF_PI;\r\n    if (area.value === AREA_ENUM.AREA_0) {\r\n      lp.lam = -theta + HALF_PI;\r\n    } else if (area.value === AREA_ENUM.AREA_1) {\r\n      lp.lam = -theta;\r\n    } else if (area.value === AREA_ENUM.AREA_2) {\r\n      lp.lam = -theta - HALF_PI;\r\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\r\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\r\n    }\r\n  } else {\r\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\r\n    var q, r, s;\r\n    q = cosphi;\r\n    t = q * q;\r\n    if (t >= 1) {\r\n      s = 0;\r\n    } else {\r\n      s = Math.sqrt(1 - t) * Math.sin(theta);\r\n    }\r\n    t += s * s;\r\n    if (t >= 1) {\r\n      r = 0;\r\n    } else {\r\n      r = Math.sqrt(1 - t);\r\n    }\r\n    /* Rotate q,r,s into the correct area. */\r\n    if (area.value === AREA_ENUM.AREA_1) {\r\n      t = r;\r\n      r = -s;\r\n      s = t;\r\n    } else if (area.value === AREA_ENUM.AREA_2) {\r\n      r = -r;\r\n      s = -s;\r\n    } else if (area.value === AREA_ENUM.AREA_3) {\r\n      t = r;\r\n      r = s;\r\n      s = -t;\r\n    }\r\n    /* Rotate q,r,s into the correct cube face. */\r\n    if (this.face === FACE_ENUM.RIGHT) {\r\n      t = q;\r\n      q = -r;\r\n      r = t;\r\n    } else if (this.face === FACE_ENUM.BACK) {\r\n      q = -q;\r\n      r = -r;\r\n    } else if (this.face === FACE_ENUM.LEFT) {\r\n      t = q;\r\n      q = r;\r\n      r = -t;\r\n    }\r\n    /* Now compute phi and lam from the unit sphere coordinates. */\r\n    lp.phi = Math.acos(-s) - HALF_PI;\r\n    lp.lam = Math.atan2(r, q);\r\n    if (this.face === FACE_ENUM.RIGHT) {\r\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\r\n    } else if (this.face === FACE_ENUM.BACK) {\r\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\r\n    } else if (this.face === FACE_ENUM.LEFT) {\r\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\r\n    }\r\n  }\r\n\r\n  /* Apply the shift from the sphere to the ellipsoid as described\r\n   * in [LK12]. */\r\n  if (this.es !== 0) {\r\n    var invert_sign;\r\n    var tanphi, xa;\r\n    invert_sign = (lp.phi < 0 ? 1 : 0);\r\n    tanphi = Math.tan(lp.phi);\r\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\r\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\r\n    if (invert_sign) {\r\n      lp.phi = -lp.phi;\r\n    }\r\n  }\r\n\r\n  lp.lam += this.long0;\r\n  p.x = lp.lam;\r\n  p.y = lp.phi;\r\n  return p;\r\n}\r\n\r\n/* Helper function for forward projection: compute the theta angle\r\n * and determine the area number. */\r\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\r\n  var theta;\r\n  if (phi < EPSLN) {\r\n    area.value = AREA_ENUM.AREA_0;\r\n    theta = 0.0;\r\n  } else {\r\n    theta = Math.atan2(y, x);\r\n    if (Math.abs(theta) <= FORTPI) {\r\n      area.value = AREA_ENUM.AREA_0;\r\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\r\n      area.value = AREA_ENUM.AREA_1;\r\n      theta -= HALF_PI;\r\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\r\n      area.value = AREA_ENUM.AREA_2;\r\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\r\n    } else {\r\n      area.value = AREA_ENUM.AREA_3;\r\n      theta += HALF_PI;\r\n    }\r\n  }\r\n  return theta;\r\n}\r\n\r\n/* Helper function: shift the longitude. */\r\nfunction qsc_shift_lon_origin(lon, offset) {\r\n  var slon = lon + offset;\r\n  if (slon < -SPI) {\r\n    slon += TWO_PI;\r\n  } else if (slon > +SPI) {\r\n    slon -= TWO_PI;\r\n  }\r\n  return slon;\r\n}\r\n\r\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n\r\n", "// Robinson projection\r\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\r\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\r\n\r\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\r\nimport adjust_lon from '../common/adjust_lon';\r\n\r\nvar COEFS_X = [\r\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\r\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\r\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\r\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\r\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\r\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\r\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\r\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\r\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\r\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\r\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\r\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\r\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\r\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\r\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\r\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\r\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\r\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\r\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\r\n];\r\n\r\nvar COEFS_Y = [\r\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\r\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\r\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\r\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\r\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\r\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\r\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\r\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\r\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\r\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\r\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\r\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\r\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\r\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\r\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\r\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\r\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\r\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\r\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\r\n];\r\n\r\nvar FXC = 0.8487;\r\nvar FYC = 1.3523;\r\nvar C1 = R2D/5; // rad to 5-degree interval\r\nvar RC1 = 1/C1;\r\nvar NODES = 18;\r\n\r\nvar poly3_val = function(coefs, x) {\r\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\r\n};\r\n\r\nvar poly3_der = function(coefs, x) {\r\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\r\n};\r\n\r\nfunction newton_rapshon(f_df, start, max_err, iters) {\r\n    var x = start;\r\n    for (; iters; --iters) {\r\n        var upd = f_df(x);\r\n        x -= upd;\r\n        if (Math.abs(upd) < max_err) {\r\n            break;\r\n        }\r\n    }\r\n    return x;\r\n}\r\n\r\nexport function init() {\r\n    this.x0 = this.x0 || 0;\r\n    this.y0 = this.y0 || 0;\r\n    this.long0 = this.long0 || 0;\r\n    this.es = 0;\r\n    this.title = this.title || \"Robinson\";\r\n}\r\n\r\nexport function forward(ll) {\r\n    var lon = adjust_lon(ll.x - this.long0);\r\n\r\n    var dphi = Math.abs(ll.y);\r\n    var i = Math.floor(dphi * C1);\r\n    if (i < 0) {\r\n        i = 0;\r\n    } else if (i >= NODES) {\r\n        i = NODES - 1;\r\n    }\r\n    dphi = R2D * (dphi - RC1 * i);\r\n    var xy = {\r\n        x: poly3_val(COEFS_X[i], dphi) * lon,\r\n        y: poly3_val(COEFS_Y[i], dphi)\r\n    };\r\n    if (ll.y < 0) {\r\n        xy.y = -xy.y;\r\n    }\r\n\r\n    xy.x = xy.x * this.a * FXC + this.x0;\r\n    xy.y = xy.y * this.a * FYC + this.y0;\r\n    return xy;\r\n}\r\n\r\nexport function inverse(xy) {\r\n    var ll = {\r\n        x: (xy.x - this.x0) / (this.a * FXC),\r\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\r\n    };\r\n\r\n    if (ll.y >= 1) { // pathologic case\r\n        ll.x /= COEFS_X[NODES][0];\r\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\r\n    } else {\r\n        // find table interval\r\n        var i = Math.floor(ll.y * NODES);\r\n        if (i < 0) {\r\n            i = 0;\r\n        } else if (i >= NODES) {\r\n            i = NODES - 1;\r\n        }\r\n        for (;;) {\r\n            if (COEFS_Y[i][0] > ll.y) {\r\n                --i;\r\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\r\n                ++i;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // linear interpolation in 5 degree interval\r\n        var coefs = COEFS_Y[i];\r\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\r\n        // find t so that poly3_val(coefs, t) = ll.y\r\n        t = newton_rapshon(function(x) {\r\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\r\n        }, t, EPSLN, 100);\r\n\r\n        ll.x /= poly3_val(COEFS_X[i], t);\r\n        ll.y = (5 * i + t) * D2R;\r\n        if (xy.y < 0) {\r\n            ll.y = -ll.y;\r\n        }\r\n    }\r\n\r\n    ll.x = adjust_lon(ll.x + this.long0);\r\n    return ll;\r\n}\r\n\r\nexport var names = [\"Robinson\", \"robin\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import {\r\n    geodeticToGeocentric,\r\n    geocentricToGeodetic\r\n} from '../datumUtils';\r\n\r\nexport function init() {\r\n    this.name = 'geocent';\r\n\r\n}\r\n\r\nexport function forward(p) {\r\n    var point = geodeticToGeocentric(p, this.es, this.a);\r\n    return point;\r\n}\r\n\r\nexport function inverse(p) {\r\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\r\n    return point;\r\n}\r\n\r\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\r\nexport default {\r\n    init: init,\r\n    forward: forward,\r\n    inverse: inverse,\r\n    names: names\r\n};", "\r\nvar mode = {\r\n  N_POLE: 0,\r\n  S_POLE: 1,\r\n  EQUIT: 2,\r\n  OBLIQ: 3\r\n};\r\n\r\nimport { D2R, HALF_PI, EPSLN } from \"../constants/values\";\r\nimport hypot from \"../common/hypot\";\r\n\r\nvar params = {\r\n  h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\r\n  azi:   { def: 0, num: true, degrees: true }, // default is North\r\n  tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\r\n  long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\r\n  lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\r\n};\r\n\r\nexport function init() {\r\n  Object.keys(params).forEach(function (p) {\r\n    if (typeof this[p] === \"undefined\") {\r\n      this[p] = params[p].def;\r\n    } else if (params[p].num && isNaN(this[p])) {\r\n      throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\r\n    } else if (params[p].num) {\r\n      this[p] = parseFloat(this[p]);\r\n    }\r\n    if (params[p].degrees) {\r\n      this[p] = this[p] * D2R;\r\n    }\r\n  }.bind(this));\r\n\r\n  if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\r\n    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\r\n  } else if (Math.abs(this.lat0) < EPSLN) {\r\n    this.mode = mode.EQUIT;\r\n  } else {\r\n    this.mode = mode.OBLIQ;\r\n    this.sinph0 = Math.sin(this.lat0);\r\n    this.cosph0 = Math.cos(this.lat0);\r\n  }\r\n\r\n  this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\r\n\r\n  if (this.pn1 <= 0 || this.pn1 > 1e10) {\r\n    throw new Error(\"Invalid height\");\r\n  }\r\n  \r\n  this.p = 1 + this.pn1;\r\n  this.rp = 1 / this.p;\r\n  this.h1 = 1 / this.pn1;\r\n  this.pfact = (this.p + 1) * this.h1;\r\n  this.es = 0;\r\n\r\n  var omega = this.tilt;\r\n  var gamma = this.azi;\r\n  this.cg = Math.cos(gamma);\r\n  this.sg = Math.sin(gamma);\r\n  this.cw = Math.cos(omega);\r\n  this.sw = Math.sin(omega);\r\n}\r\n\r\nexport function forward(p) {\r\n  p.x -= this.long0;\r\n  var sinphi = Math.sin(p.y);\r\n  var cosphi = Math.cos(p.y);\r\n  var coslam = Math.cos(p.x);\r\n  var x, y;\r\n  switch (this.mode) {\r\n    case mode.OBLIQ:\r\n      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\r\n      break;\r\n    case mode.EQUIT:\r\n      y = cosphi * coslam;\r\n      break;\r\n    case mode.S_POLE:\r\n      y = -sinphi;\r\n      break;\r\n    case mode.N_POLE:\r\n      y = sinphi;\r\n      break;\r\n  }\r\n  y = this.pn1 / (this.p - y);\r\n  x = y * cosphi * Math.sin(p.x);\r\n\r\n  switch (this.mode) {\r\n    case mode.OBLIQ:\r\n      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\r\n      break;\r\n    case mode.EQUIT:\r\n      y *= sinphi;\r\n      break;\r\n    case mode.N_POLE:\r\n      y *= -(cosphi * coslam);\r\n      break;\r\n    case mode.S_POLE:\r\n      y *= cosphi * coslam;\r\n      break;\r\n  }\r\n\r\n  // Tilt \r\n  var yt, ba;\r\n  yt = y * this.cg + x * this.sg;\r\n  ba = 1 / (yt * this.sw * this.h1 + this.cw);\r\n  x = (x * this.cg - y * this.sg) * this.cw * ba;\r\n  y = yt * ba;\r\n\r\n  p.x = x * this.a;\r\n  p.y = y * this.a;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  p.x /= this.a;\r\n  p.y /= this.a;\r\n  var r = { x: p.x, y: p.y };\r\n\r\n  // Un-Tilt\r\n  var bm, bq, yt;\r\n  yt = 1 / (this.pn1 - p.y * this.sw);\r\n  bm = this.pn1 * p.x * yt;\r\n  bq = this.pn1 * p.y * this.cw * yt;\r\n  p.x = bm * this.cg + bq * this.sg;\r\n  p.y = bq * this.cg - bm * this.sg;\r\n\r\n  var rh = hypot(p.x, p.y);\r\n  if (Math.abs(rh) < EPSLN) {\r\n    r.x = 0;\r\n    r.y = p.y;\r\n  } else {\r\n    var cosz, sinz;\r\n    sinz = 1 - rh * rh * this.pfact;\r\n    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\r\n    cosz = Math.sqrt(1 - sinz * sinz);\r\n    switch (this.mode) {\r\n      case mode.OBLIQ:\r\n        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\r\n        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\r\n        p.x *= sinz * this.cosph0;\r\n        break;\r\n      case mode.EQUIT:\r\n        r.y = Math.asin(p.y * sinz / rh);\r\n        p.y = cosz * rh;\r\n        p.x *= sinz;\r\n        break;\r\n      case mode.N_POLE:\r\n        r.y = Math.asin(cosz);\r\n        p.y = -p.y;\r\n        break;\r\n      case mode.S_POLE:\r\n        r.y = -Math.asin(cosz);\r\n        break;\r\n    }\r\n    r.x = Math.atan2(p.x, p.y);\r\n  }\r\n\r\n  p.x = r.x + this.long0;\r\n  p.y = r.y;\r\n  return p;\r\n}\r\n\r\nexport var names = [\"Tilted_Perspective\", \"tpers\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};\r\n", "import hypot from '../common/hypot';\r\n\r\nexport function init() {\r\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\r\n    this.h = Number(this.h);\r\n    this.radius_g_1 = this.h / this.a;\r\n\r\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\r\n        throw new Error();\r\n    }\r\n\r\n    this.radius_g = 1.0 + this.radius_g_1;\r\n    this.C = this.radius_g * this.radius_g - 1.0;\r\n\r\n    if (this.es !== 0.0) {\r\n        var one_es = 1.0 - this.es;\r\n        var rone_es = 1 / one_es;\r\n\r\n        this.radius_p = Math.sqrt(one_es);\r\n        this.radius_p2 = one_es;\r\n        this.radius_p_inv2 = rone_es;\r\n\r\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\r\n    } else {\r\n        this.radius_p = 1.0;\r\n        this.radius_p2 = 1.0;\r\n        this.radius_p_inv2 = 1.0;\r\n\r\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\r\n    }\r\n\r\n    if (!this.title) {\r\n        this.title = \"Geostationary Satellite View\";\r\n    }\r\n}\r\n\r\nfunction forward(p) {\r\n    var lon = p.x;\r\n    var lat = p.y;\r\n    var tmp, v_x, v_y, v_z;\r\n    lon = lon - this.long0;\r\n\r\n    if (this.shape === 'ellipse') {\r\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\r\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\r\n\r\n        v_x = r * Math.cos(lon) * Math.cos(lat);\r\n        v_y = r * Math.sin(lon) * Math.cos(lat);\r\n        v_z = r * Math.sin(lat);\r\n\r\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\r\n            p.x = Number.NaN;\r\n            p.y = Number.NaN;\r\n            return p;\r\n        }\r\n\r\n        tmp = this.radius_g - v_x;\r\n        if (this.flip_axis) {\r\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\r\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\r\n        } else {\r\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\r\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\r\n        }\r\n    } else if (this.shape === 'sphere') {\r\n        tmp = Math.cos(lat);\r\n        v_x = Math.cos(lon) * tmp;\r\n        v_y = Math.sin(lon) * tmp;\r\n        v_z = Math.sin(lat);\r\n        tmp = this.radius_g - v_x;\r\n\r\n        if (this.flip_axis) {\r\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\r\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\r\n        } else {\r\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\r\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\r\n        }\r\n    }\r\n    p.x = p.x * this.a;\r\n    p.y = p.y * this.a;\r\n    return p;\r\n}\r\n\r\nfunction inverse(p) {\r\n    var v_x = -1.0;\r\n    var v_y = 0.0;\r\n    var v_z = 0.0;\r\n    var a, b, det, k;\r\n\r\n    p.x = p.x / this.a;\r\n    p.y = p.y / this.a;\r\n\r\n    if (this.shape === 'ellipse') {\r\n        if (this.flip_axis) {\r\n            v_z = Math.tan(p.y / this.radius_g_1);\r\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\r\n        } else {\r\n            v_y = Math.tan(p.x / this.radius_g_1);\r\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\r\n        }\r\n\r\n        var v_zp = v_z / this.radius_p;\r\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\r\n        b = 2 * this.radius_g * v_x;\r\n        det = (b * b) - 4 * a * this.C;\r\n\r\n        if (det < 0.0) {\r\n            p.x = Number.NaN;\r\n            p.y = Number.NaN;\r\n            return p;\r\n        }\r\n\r\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\r\n        v_x = this.radius_g + k * v_x;\r\n        v_y *= k;\r\n        v_z *= k;\r\n\r\n        p.x = Math.atan2(v_y, v_x);\r\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\r\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\r\n    } else if (this.shape === 'sphere') {\r\n        if (this.flip_axis) {\r\n            v_z = Math.tan(p.y / this.radius_g_1);\r\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\r\n        } else {\r\n            v_y = Math.tan(p.x / this.radius_g_1);\r\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\r\n        }\r\n\r\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\r\n        b = 2 * this.radius_g * v_x;\r\n        det = (b * b) - 4 * a * this.C;\r\n        if (det < 0.0) {\r\n            p.x = Number.NaN;\r\n            p.y = Number.NaN;\r\n            return p;\r\n        }\r\n\r\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\r\n        v_x = this.radius_g + k * v_x;\r\n        v_y *= k;\r\n        v_z *= k;\r\n\r\n        p.x = Math.atan2(v_y, v_x);\r\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\r\n    }\r\n    p.x = p.x + this.long0;\r\n    return p;\r\n}\r\n\r\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\r\nexport default {\r\n    init: init,\r\n    forward: forward,\r\n    inverse: inverse,\r\n    names: names,\r\n};\r\n\r\n", "/**\r\n * Copyright 2018 Bernie Jenny, Monash University, Melbourne, Australia.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * Equal Earth is a projection inspired by the Robinson projection, but unlike\r\n * the Robinson projection retains the relative size of areas. The projection\r\n * was designed in 2018 by Bojan Savric, Tom Patterson and Bernhard Jenny.\r\n *\r\n * Publication:\r\n * Bojan Savric, Tom Patterson & Bernhard Jenny (2018). The Equal Earth map\r\n * projection, International Journal of Geographical Information Science,\r\n * DOI: 10.1080/13658816.2018.1504949\r\n *\r\n * Code released August 2018\r\n * Ported to JavaScript and adapted for mapshaper-proj by Matthew Bloch August 2018\r\n * Modified for proj4js by Andreas Hocevar by Andreas Hocevar March 2024\r\n */\r\n\r\nimport adjust_lon from \"../common/adjust_lon\";\r\n\r\nvar A1 = 1.340264,\r\n    A2 = -0.081106,\r\n    A3 = 0.000893,\r\n    A4 = 0.003796,\r\n    M = Math.sqrt(3) / 2.0;\r\n\r\nexport function init() {\r\n  this.es = 0;\r\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\r\n}\r\n\r\nexport function forward(p) {\r\n  var lam = adjust_lon(p.x - this.long0);\r\n  var phi = p.y;\r\n  var paramLat = Math.asin(M * Math.sin(phi)),\r\n  paramLatSq = paramLat * paramLat,\r\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\r\n  p.x = lam * Math.cos(paramLat) /\r\n  (M * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));\r\n  p.y = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));\r\n\r\n  p.x = this.a * p.x + this.x0;\r\n  p.y = this.a * p.y + this.y0;\r\n  return p;\r\n}\r\n\r\nexport function inverse(p) {\r\n  p.x = (p.x - this.x0) / this.a;\r\n  p.y = (p.y - this.y0) / this.a;\r\n\r\n  var EPS = 1e-9,\r\n      NITER = 12,\r\n      paramLat = p.y,\r\n      paramLatSq, paramLatPow6, fy, fpy, dlat, i;\r\n\r\n  for (i = 0; i < NITER; ++i) {\r\n    paramLatSq = paramLat * paramLat;\r\n    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\r\n    fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - p.y;\r\n    fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);\r\n    paramLat -= dlat = fy / fpy;\r\n    if (Math.abs(dlat) < EPS) {\r\n        break;\r\n    }\r\n  }\r\n  paramLatSq = paramLat * paramLat;\r\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\r\n  p.x = M * p.x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) /\r\n          Math.cos(paramLat);\r\n  p.y = Math.asin(Math.sin(paramLat) / M);\r\n\r\n  p.x = adjust_lon(p.x + this.long0);\r\n  return p;\r\n}\r\n\r\nexport var names = [\"eqearth\", \"Equal Earth\", \"Equal_Earth\"];\r\nexport default {\r\n  init: init,\r\n  forward: forward,\r\n  inverse: inverse,\r\n  names: names\r\n};", "import adjust_lat from \"../common/adjust_lat\";\r\nimport adjust_lon from \"../common/adjust_lon\";\r\nimport hypot from \"../common/hypot\";\r\nimport pj_enfn from \"../common/pj_enfn\";\r\nimport pj_inv_mlfn from \"../common/pj_inv_mlfn\";\r\nimport pj_mlfn from \"../common/pj_mlfn\";\r\nimport { HALF_PI } from \"../constants/values\";\r\n\r\nvar EPS10 = 1e-10;\r\n\r\nexport function init() {\r\n  var c;\r\n\r\n  this.phi1 = this.lat1;\r\n  if (Math.abs(this.phi1) < EPS10) {\r\n    throw new Error();\r\n  }\r\n  if (this.es) {\r\n    this.en = pj_enfn(this.es);\r\n    this.m1 = pj_mlfn(this.phi1, this.am1 = Math.sin(this.phi1),\r\n      c = Math.cos(this.phi1), this.en);\r\n    this.am1 = c / (Math.sqrt(1 - this.es * this.am1 * this.am1) * this.am1);\r\n    this.inverse = e_inv;\r\n    this.forward = e_fwd;\r\n  } else {\r\n    if (Math.abs(this.phi1) + EPS10 >= HALF_PI) {\r\n      this.cphi1 = 0;\r\n    }\r\n    else {\r\n      this.cphi1 = 1 / Math.tan(this.phi1);\r\n    }\r\n    this.inverse = s_inv;\r\n    this.forward = s_fwd;\r\n  }\r\n}\r\n\r\nfunction e_fwd(p) {\r\n  var lam = adjust_lon(p.x - (this.long0 || 0));\r\n  var phi = p.y;\r\n  var rh, E, c;\r\n  rh = this.am1 + this.m1 - pj_mlfn(phi, E = Math.sin(phi), c = Math.cos(phi), this.en);\r\n  E = c * lam / (rh * Math.sqrt(1 - this.es * E * E));\r\n  p.x = rh * Math.sin(E);\r\n  p.y = this.am1 - rh * Math.cos(E);\r\n\r\n  p.x = this.a * p.x + (this.x0 || 0);\r\n  p.y = this.a * p.y + (this.y0 || 0);\r\n  return p;\r\n}\r\n\r\nfunction e_inv(p) {\r\n  p.x = (p.x - (this.x0 || 0)) / this.a;\r\n  p.y = (p.y - (this.y0 || 0)) / this.a;\r\n\r\n  var s, rh, lam, phi;\r\n  rh = hypot(p.x, p.y = this.am1 - p.y);\r\n  phi = pj_inv_mlfn(this.am1 + this.m1 - rh, this.es, this.en);\r\n  if ((s = Math.abs(phi)) < HALF_PI) {\r\n    s = Math.sin(phi);\r\n    lam = rh * Math.atan2(p.x, p.y) * Math.sqrt(1 - this.es * s * s) / Math.cos(phi);\r\n  } else if (Math.abs(s - HALF_PI) <= EPS10) {\r\n    lam = 0;\r\n  }\r\n  else {\r\n    throw new Error();\r\n  }\r\n  p.x = adjust_lon(lam + (this.long0 || 0));\r\n  p.y = adjust_lat(phi);\r\n  return p;\r\n}\r\n\r\nfunction s_fwd(p) {\r\n  var lam = adjust_lon(p.x - (this.long0 || 0));\r\n  var phi = p.y;\r\n  var E, rh;\r\n  rh = this.cphi1 + this.phi1 - phi;\r\n  if (Math.abs(rh) > EPS10) {\r\n    p.x = rh * Math.sin(E = lam * Math.cos(phi) / rh);\r\n    p.y = this.cphi1 - rh * Math.cos(E);\r\n  } else {\r\n    p.x = p.y = 0;\r\n  }\r\n\r\n  p.x = this.a * p.x + (this.x0 || 0);\r\n  p.y = this.a * p.y + (this.y0 || 0);\r\n  return p;\r\n}\r\n\r\nfunction s_inv(p) {\r\n  p.x = (p.x - (this.x0 || 0)) / this.a;\r\n  p.y = (p.y - (this.y0 || 0)) / this.a;\r\n\r\n  var lam, phi;\r\n  var rh = hypot(p.x, p.y = this.cphi1 - p.y);\r\n  phi = this.cphi1 + this.phi1 - rh;\r\n  if (Math.abs(phi) > HALF_PI) {\r\n    throw new Error();\r\n  }\r\n  if (Math.abs(Math.abs(phi) - HALF_PI) <= EPS10) {\r\n    lam = 0;\r\n  } else {\r\n    lam = rh * Math.atan2(p.x, p.y) / Math.cos(phi);\r\n  }\r\n  p.x = adjust_lon(lam + (this.long0 || 0));\r\n  p.y = adjust_lat(phi);\r\n  return p;\r\n}\r\n\r\nexport var names = [\"bonne\", \"Bonne (Werner lat_1=90)\"];\r\nexport default {\r\n  init: init,\r\n  names: names\r\n};", "import tmerc from './lib/projections/tmerc';\r\nimport etmerc from './lib/projections/etmerc';\r\nimport utm from './lib/projections/utm';\r\nimport sterea from './lib/projections/sterea';\r\nimport stere from './lib/projections/stere';\r\nimport somerc from './lib/projections/somerc';\r\nimport omerc from './lib/projections/omerc';\r\nimport lcc from './lib/projections/lcc';\r\nimport krovak from './lib/projections/krovak';\r\nimport cass from './lib/projections/cass';\r\nimport laea from './lib/projections/laea';\r\nimport aea from './lib/projections/aea';\r\nimport gnom from './lib/projections/gnom';\r\nimport cea from './lib/projections/cea';\r\nimport eqc from './lib/projections/eqc';\r\nimport poly from './lib/projections/poly';\r\nimport nzmg from './lib/projections/nzmg';\r\nimport mill from './lib/projections/mill';\r\nimport sinu from './lib/projections/sinu';\r\nimport moll from './lib/projections/moll';\r\nimport eqdc from './lib/projections/eqdc';\r\nimport vandg from './lib/projections/vandg';\r\nimport aeqd from './lib/projections/aeqd';\r\nimport ortho from './lib/projections/ortho';\r\nimport qsc from './lib/projections/qsc';\r\nimport robin from './lib/projections/robin';\r\nimport geocent from './lib/projections/geocent';\r\nimport tpers from './lib/projections/tpers';\r\nimport geos from './lib/projections/geos';\r\nimport eqearth from './lib/projections/eqearth';\r\nimport bonne from './lib/projections/bonne';\r\nexport default function(proj4){\r\n  proj4.Proj.projections.add(tmerc);\r\n  proj4.Proj.projections.add(etmerc);\r\n  proj4.Proj.projections.add(utm);\r\n  proj4.Proj.projections.add(sterea);\r\n  proj4.Proj.projections.add(stere);\r\n  proj4.Proj.projections.add(somerc);\r\n  proj4.Proj.projections.add(omerc);\r\n  proj4.Proj.projections.add(lcc);\r\n  proj4.Proj.projections.add(krovak);\r\n  proj4.Proj.projections.add(cass);\r\n  proj4.Proj.projections.add(laea);\r\n  proj4.Proj.projections.add(aea);\r\n  proj4.Proj.projections.add(gnom);\r\n  proj4.Proj.projections.add(cea);\r\n  proj4.Proj.projections.add(eqc);\r\n  proj4.Proj.projections.add(poly);\r\n  proj4.Proj.projections.add(nzmg);\r\n  proj4.Proj.projections.add(mill);\r\n  proj4.Proj.projections.add(sinu);\r\n  proj4.Proj.projections.add(moll);\r\n  proj4.Proj.projections.add(eqdc);\r\n  proj4.Proj.projections.add(vandg);\r\n  proj4.Proj.projections.add(aeqd);\r\n  proj4.Proj.projections.add(ortho);\r\n  proj4.Proj.projections.add(qsc);\r\n  proj4.Proj.projections.add(robin);\r\n  proj4.Proj.projections.add(geocent);\r\n  proj4.Proj.projections.add(tpers);\r\n  proj4.Proj.projections.add(geos);\r\n  proj4.Proj.projections.add(eqearth);\r\n  proj4.Proj.projections.add(bonne);\r\n}", "import proj4 from './core';\r\nimport Proj from \"./Proj\";\r\nimport Point from \"./Point\";\r\nimport common from \"./common/toPoint\";\r\nimport defs from \"./defs\";\r\nimport nadgrid from \"./nadgrid\";\r\nimport transform from \"./transform\";\r\nimport mgrs from \"mgrs\";\r\nimport includedProjections from \"../projs\";\r\n\r\nproj4.defaultDatum = 'WGS84'; //default datum\r\nproj4.Proj = Proj;\r\nproj4.WGS84 = new proj4.Proj('WGS84');\r\nproj4.Point = Point;\r\nproj4.toPoint = common;\r\nproj4.defs = defs;\r\nproj4.nadgrid = nadgrid;\r\nproj4.transform = transform;\r\nproj4.mgrs = mgrs;\r\nproj4.version = '__VERSION__';\r\nincludedProjections(proj4);\r\nexport default proj4;\r\n"],
  "mappings": "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",
  "names": ["defs", "params", "D2R", "params", "init", "names", "init", "names", "names", "exports", "exports", "sphere", "exports", "datum", "nadgrid", "start", "Z", "inverse", "wgs84", "forward", "inverse", "inverse", "A", "M", "C1", "forward", "init", "forward", "inverse", "names", "init", "Z", "forward", "inverse", "names", "init", "names", "MAX_ITER", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "A", "inverse", "names", "init", "forward", "I", "inverse", "names", "init", "forward", "V", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "MAX_ITER", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "MAX_ITER", "init", "forward", "V", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "M", "A", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "start", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "names", "proj4"]
}
